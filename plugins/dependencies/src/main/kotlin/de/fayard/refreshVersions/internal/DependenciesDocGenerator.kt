package de.fayard.refreshVersions

import Square
import de.fayard.refreshVersions.core.DependencyKdoc
import de.fayard.refreshVersions.core.ModuleId.Maven
import de.fayard.refreshVersions.core.RefreshVersionsCorePlugin

internal object DependenciesDocGenerator {

    fun hardCoded() = listOf(
        Maven("com.squareup.sqldelight", "coroutines-extensions"),
        Maven("io.kotest", "kotest-core")
    )

    fun generateMarkdown(dependenciesAndDocs: List<DocumentedDependency>): String {
        return """
${DocumentedDependency.MARKDOWN_INTRO}

${dependenciesAndDocs.joinToString("\n\n"){ it.markdown() }}
        """.trimIndent()
    }

    fun dependenciesAndDocs(mavenDependenciesInBuild: List<Maven>): List<DocumentedDependency> {
        println("Ignoring for now because hardcoded the list :$mavenDependenciesInBuild")
        val (mavenSquare, mavenKotest) = hardCoded()
        val square = DocumentedDependency(
            maven = mavenSquare,
            kotlinName = "Square.sqlDelight.extensions.coroutines",
            versionName = "version.sqldlight",
            kdoc = Square.sqlDelight.kdoc(),
        )
        val kotest = DocumentedDependency(
            maven = mavenKotest,
            kotlinName = "Testing.kotest.core",
            versionName = "version.kotest",
            kdoc = Testing.kotest.kdoc(),
        )
        return listOf(square, kotest)
    }

    fun updateChangeLogsUrlsInFiles(documentedDependencies: List<DocumentedDependency>) {
        println("## updateChangeLogsUrlsInFiles()")
        println(documentedDependencies.mapNotNull { it.kdoc?.changelogUrl }.joinToString("\n"))
        println("well I'm not doing anything for now")
    }
}

internal data class DocumentedDependency(
    val maven: Maven,
    val kotlinName: String,
    val versionName: String,
    val kdoc: DependencyKdoc?,
) {
    fun markdown(): String {
        val infos = listOfNotNull(
            kdoc?.title?.let { "- title: $it" },
            kdoc?.website?.let { "- website: $it" },
            kdoc?.changelogUrl?.let { "- changelog: $it" },
            "- maven: ${maven.group}:${maven.name}",
        )
        return """
## $kotlinName

${infos.joinToString("\n")}

${kdoc?.description ?: ""}
        """.trimIndent()
    }

    companion object {
        val MARKDOWN_INTRO = """
# Dependencies documentation

Generated by [refreshVersions](${RefreshVersionsCorePlugin.refreshVersionsUrl}) with `./gradlew ${RefreshDependenciesDocTask.TASK_NAME}`

_todo: table of contents_

    """.trimIndent()

    }
}
