{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gradle refreshVersions","text":"<p>Life is too short to google for dependencies and versions</p> <p></p>"},{"location":"#why-refreshversions","title":"Why refreshVersions?","text":"<p>Gradle multi-module projects are on the rise.</p> <p>At the same time, library vendors publish very modularized artifacts:</p> <ul> <li>On Android, the big fat support libraries are dead, and their replacement, <code>AndroidX</code>, contains more than 200 different dependencies, grouped in over 70 groups, each having its own version. (AndroidX is only a part of first-party dependencies for Android projects, and third party dependencies can add up.)</li> <li>On the server, many frameworks or library suites offer a high number of artifacts. That applies to Ktor, Spring, http4k and others. Again, that\u2019s not even counting third party dependencies.</li> </ul> <p>Both trends come with great technical benefits.</p> <p>However, they also make it much more tedious to find where to add and update your dependencies in all those <code>build.gradle[.kts]</code> files!</p> <p>We saw this make developers update the dependencies less and less often, effectively leading to legacy accumulation (a form of technical debt), or even projects abandon. Yes, that\u2019s sad.</p> <p>Can we have our cake and eat it?</p> <p>We firmly believe that yes, we can have the benefits of modularization without the hell of dependency management.</p> <p>So what does <code>gradle refreshVersions</code>?</p>"},{"location":"#centralize-your-dependencies-in-a-proper-file-format","title":"Centralize your dependencies in a proper file format","text":"<p>Everyone who uses Gradle in a multi-modules environment has looked for a way to centralize all dependencies in one place. And there are solutions for that. Too many solutions in fact. Some put their versions in a variable <code>val retrofitVersion = 2.9.0</code>, others in <code>rootproject.ext</code>, others in a <code>libraries.gradle</code> file, others still in <code>buildSrc/src/main/Versions.kt</code>, and the list goes on and on!</p> <p>A problem common to all those solutions is that they store the versions in a turing-complete programming language (Groovy or Kotlin). Then people try to hack together regular expressions to read or modify those files.</p> <p>We think this is wrong!</p> <p>Instead, gradle refreshVersions stores all the versions in one place in a proper file format: Java Properties, like <code>gradle.properties</code>. Just like npm\u2019s package.json, Maven\u2019s pom.xml, this file can be easily read and written by a computer program. Yes to better tooling!</p>"},{"location":"#no-magic","title":"No Magic!","text":"<p>You wonder how this works?</p> <p>No black magic involved, we leverage Gradle public APIs that are designed to edit declared dependencies (<code>Configuration.withDependencies</code>, and <code>PluginManagement.resolutionStrategy</code>), and we edit the versions constraints there. The rest is just a set of conventions.</p> <p>Consider the example below:</p> Dependency notation Version key org.gradle:gradle-hello-world-plugin:_ version.org.gradle..gradle-hello-world-plugin com.squareup.retrofit2:retrofit:_ version.retrofit com.squareup.retrofit2:retrofit-adapter-xxx:_ version.retrofit plugin with id \u201ccom.squareup.sqldelight\u201d plugin.com.squareup.sqldelight <ul> <li>gradle refreshVersions works with an opt-in mechanism. It only manages dependencies where the version is set to be a placeholder, more specifically the underscore <code>_</code>, which, akin to Kotlin, here means that the version is not used, being instead set in the <code>versions.properties</code> file.</li> <li>gradle refreshVersions has a system of rules that here, allows to set all Retrofit dependencies with the same version key <code>version.retrofit</code> , keeping things DRY.</li> </ul>"},{"location":"#look-up-for-updates-automatically","title":"Look up for updates automatically","text":"<p>With this infrastructure being in place, the major feature of gradle refreshVersions is like its name suggests: It will look up for all available updates of the dependencies used in the project.</p> <p>Simply run <code>$ ./gradlew refreshVersions</code> and you will see the available updates as comments:</p> <p></p> <p>Why as comment? Because while googling manually for available updates is a monkey job that is best done by a computer program, while deciding whether to upgrade or not is your job as a programmer.</p> <p>Read more: Update Dependencies</p>"},{"location":"#its-fast","title":"It\u2019s fast!","text":"<p>The Kotlin Libraries Playground contains about 80 dependencies, and counting.</p> <p>How long would it take to search for all available updates?</p> <ul> <li>Well, if you do it manually: enough to hate your life.</li> <li>With the gradle-versions-plugin it will take about 2 minutes.</li> <li>With refreshVersions, you are done in 10 seconds!</li> </ul> <p>See benchmarks here.</p>"},{"location":"#add-dependencies-quickly","title":"Add dependencies quickly!","text":"<p>gradle refreshVersions provides ready-to-use organized dependency notations for popular libraries.</p> <p></p> <p>Read more: Add Dependencies</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Gradle 6.8+</li> <li>IntelliJ IDEA or Android Studio</li> </ul>"},{"location":"#try-it-out-with-zero-setup","title":"Try it out with zero setup!","text":"<p>The simplest way to try out gradle refreshVersions is with our official sample, the Kotlin libraries Playground!</p> <p>Everything is pre-configured here, so just open the project in IntelliJ and start adding and upgrading dependencies.</p> <p></p> <p>Warning: You may also learn a ton of things about Kotlin libraries in the process!</p>"},{"location":"#funding","title":"Funding \u2764\ufe0f","text":"<p>We hope this open source project saves you a lot of time!</p> <p>It is maintained by its authors, Jean-Michel Fayard and Louis CAD.</p> <p>You can buy us more time by becoming our sponsors:</p> <ul> <li>\ud83d\udc9d Louis CAD GitHub Sponsors page</li> <li>\ud83d\udc9d Jean-Michel GitHub Sponsors page</li> </ul> <p>We\u2019re very grateful to you and our existing sponsors, thank you! \u2764\ufe0f\u2764\ufe0f</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you only want to submit an issue, see this quick guide to maximize the likelihood of it being eventually resolved.</p> <p>If you want to submit a successful PR, start by reading our guide.</p>"},{"location":"#license","title":"License","text":"<p>This project is provided under the MIT License.</p>"},{"location":"CHANGELOG/","title":"Change log for refreshVersions","text":""},{"location":"CHANGELOG/#version-0606-2025-08-15","title":"Version 0.60.6 (2025-08-15)","text":""},{"location":"CHANGELOG/#bug-fix","title":"Bug fix","text":"<p>Replaced usage of internal Gradle API that was removed/hidden in Gradle 9.0.0 and caused the builds of \u201cconsumer\u201d projects to fail on Gradle upgrade.</p> <p>Thanks to AlexanderBartash for their contribution, and to the people that pinged me in issue #735!</p>"},{"location":"CHANGELOG/#version-0605-2024-02-05","title":"Version 0.60.5 (2024-02-05)","text":""},{"location":"CHANGELOG/#new-dependency-notation","title":"New dependency notation","text":"<ul> <li><code>AndroidX.wear.watchFace.complications.data</code></li> </ul>"},{"location":"CHANGELOG/#other-change","title":"Other change","text":"<p>Change the version key of all watchface complication dependencies to be centralized.</p>"},{"location":"CHANGELOG/#version-0604-2024-01-31","title":"Version 0.60.4 (2024-01-31)","text":""},{"location":"CHANGELOG/#potentially-breaking-change","title":"Potentially breaking change","text":"<p>We now support only Gradle 8+. Use Gradle 8+ or stick to version 0.60.3 if you can\u2019t yet.</p>"},{"location":"CHANGELOG/#bug-fix_1","title":"Bug fix","text":"<p>Update the priority of artifact version key rules so that the longest match takes precedence, rather than the final key length. That should fix the keys of <code>androidx.wear.compose</code> libraries.</p>"},{"location":"CHANGELOG/#version-0603-2023-09-27","title":"Version 0.60.3 (2023-09-27)","text":""},{"location":"CHANGELOG/#bug-fix_2","title":"Bug fix","text":"<p>Fix a bug where version keys would be marked as unused in some projects.</p>"},{"location":"CHANGELOG/#new-dependency-notations","title":"New dependency notations","text":"Click to expand (2)   - `AndroidX.bluetooth` - `AndroidX.bluetooth.testing`"},{"location":"CHANGELOG/#version-0602-2023-08-29","title":"Version 0.60.2 (2023-08-29)","text":""},{"location":"CHANGELOG/#bug-fix_3","title":"Bug fix","text":"<p>Some version keys were wrongly marked as unused following version 0.60.0. That\u2019s now fixed. Thanks to the reporters and people that helped in reproducing the issue!</p>"},{"location":"CHANGELOG/#removed-dependency-notations","title":"Removed dependency notations","text":"<p>Several Accompanist libraries were deprecated following this announcement. As a result, we updated removed them from refreshVersions. As usual, it won\u2019t break projects because we update the dependency notations with the equivalent string literal. Also, relevant inline comments with links will be added to assist migration.</p>"},{"location":"CHANGELOG/#new-dependency-notations_1","title":"New dependency notations","text":"Click to expand (18)   - `AndroidX.core.performance.playServices` - `AndroidX.core.performance.testing` - `CashApp.sqlDelight.drivers.android` - `CashApp.sqlDelight.extensions.androidPaging3` - `CashApp.sqlDelight.extensions.coroutines` - `CashApp.sqlDelight.gradlePlugin` - `CashApp.sqlDelight.dialects.hSql` - `CashApp.sqlDelight.drivers.jdbc` - `CashApp.sqlDelight.dialects.mySql` - `CashApp.sqlDelight.drivers.native` - `CashApp.sqlDelight.dialects.postgreSql` - `CashApp.sqlDelight.extensions.rxJava2` - `CashApp.sqlDelight.extensions.rxJava3` - `CashApp.sqlDelight.drivers.jdbcSqlite` - `CashApp.sqlDelight.drivers.sqlJs` - `CashApp.sqlDelight.drivers.webWorker` - `Google.accompanist.adaptive` - `Google.accompanist.testHarness`"},{"location":"CHANGELOG/#version-0601-2023-08-24","title":"Version 0.60.1 (2023-08-24)","text":""},{"location":"CHANGELOG/#bug-fix_4","title":"Bug fix","text":"<ul> <li>Fix crash on projects that had no version catalog.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_2","title":"New dependency notations:","text":"Click to expand (25)   - `Google.android.play.appUpdateKtx` - `Google.android.play.appUpdate` - `Google.android.play.assetDeliveryKtx` - `Google.android.play.assetDelivery` - `Google.android.play.featureDeliveryKtx` - `Google.android.play.featureDelivery` - `Google.android.play.reviewKtx` - `Google.android.play.review` - `Google.horologist.annotations` - `Google.horologist.auth.composables` - `Google.horologist.auth.data.phone` - `Google.horologist.auth.data.watchOAuth` - `Google.horologist.auth.data` - `Google.horologist.auth.ui` - `Google.horologist.compose.material` - `Google.horologist.dataLayer.grpc` - `Google.horologist.dataLayer.phone` - `Google.horologist.dataLayer.watch` - `Google.horologist.healthComposables` - `Google.horologist.media3.audioOffload` - `Google.horologist.media3.logging` - `Google.horologist.media3.outputSwitcher` - `Google.horologist.networkAwareness.db` - `Google.horologist.networkAwareness.okHttp` - `Google.horologist.networkAwareness.ui`"},{"location":"CHANGELOG/#version-0600-2023-08-17","title":"Version 0.60.0 (2023-08-17)","text":""},{"location":"CHANGELOG/#full-configuration-cache-support-for-the-refreshversions-task","title":"Full configuration cache support for the <code>refreshVersions</code> task","text":"<p>Now, running the <code>refreshVersions</code> task repeatedly will be much faster, because it now supports configuration cache fully! That also means that it\u2019s ready for Gradle 9 when it\u2019ll be released.</p>"},{"location":"CHANGELOG/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix \u201cThe root project is not yet available for build.\u201d error that would show up when using configuration cache in a project having <code>refreshVersions</code> configured for the <code>buildSrc</code> too.</li> <li>For projects using refreshVersions in their <code>buildSrc</code> too, a log would claim that new files were created after running the <code>refreshVersions</code> task, when they were only modified, or not touched at all. We fixed it.</li> <li>When no files were modified after running the <code>refreshVersions</code> task, there would still be a log saying that <code>versions.properties</code> and <code>libs.versions.toml</code> (if any) were updated or created. Now, it\u2019s only shown if there are actual changes.</li> <li>When running the <code>refreshVersions</code> task, it would always claim that some versions were hardcoded as it counted project dependencies. We are now filtering those out, and we updated the wording to reflect that they might not be actually hardcoded, as is the case when versions come from a Gradle plugin.</li> <li>Fix alignment of available update for versions catalogs for keys that are 3 characters long.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_3","title":"New dependency notations:","text":"Click to expand (57)   - `AndroidX.appSearch.debugView` - `AndroidX.appSearch.ktx` - `AndroidX.benchmark.baselineProfileGradlePlugin` - `AndroidX.camera.viewFinder` - `AndroidX.core.i18n` - `AndroidX.core.locationAltitude` - `AndroidX.core.telecom` - `AndroidX.core.testing` - `AndroidX.credentials.playServicesAuth` - `AndroidX.credentials` - `AndroidX.emoji2.picker` - `AndroidX.glance.material3` - `AndroidX.glance.material` - `AndroidX.graphics.path` - `AndroidX.graphics.shapes` - `AndroidX.media3.container` - `AndroidX.media3.effect` - `AndroidX.media3.muxer` - `AndroidX.mediaRouter.testing` - `AndroidX.privacySandbox.plugins.library` - `AndroidX.privacySandbox.sdkRuntime.client` - `AndroidX.privacySandbox.sdkRuntime.core` - `AndroidX.privacySandbox.tools.apiCompiler` - `AndroidX.privacySandbox.tools.apiGenerator` - `AndroidX.privacySandbox.tools.apiPackager` - `AndroidX.privacySandbox.tools.core` - `AndroidX.privacySandbox.tools` - `AndroidX.privacySandbox.ui.client` - `AndroidX.privacySandbox.ui.core` - `AndroidX.privacySandbox.ui.provider` - `AndroidX.room.gradlePlugin` - `AndroidX.tracing.perfetto.handshake` - `AndroidX.wear.compose.material3` - `AndroidX.wear.compose.uiTooling` - `AndroidX.wear.protoLayout.expression` - `AndroidX.wear.protoLayout.material` - `AndroidX.wear.protoLayout.renderer` - `AndroidX.wear.protoLayout` - `AndroidX.window.extensions.core` - `Google.android.playServices.deviceToDeviceInteractions` - `Google.android.playServices.gamesV2.nativeC` - `Google.android.playServices.gamesV2` - `Google.android.playServices.matter` - `Google.android.playServices.mlKit.naturalLanguage.smartReply` - `Google.android.playServices.mlKit.vision.barcodeScanning.codeScanner` - `Google.android.playServices.mlKit.vision.textRecognition.chinese` - `Google.android.playServices.mlKit.vision.textRecognition.devanagari` - `Google.android.playServices.mlKit.vision.textRecognition.japanese` - `Google.android.playServices.mlKit.vision.textRecognition.korean` - `Google.android.playServices.tfLite.accelerationService` - `Google.android.playServices.tfLite.gpu` - `Google.android.playServices.tfLite.java` - `Google.android.playServices.tfLite.support` - `Google.android.playServices.threadNetwork` - `Google.mlKit.vision.entityExtraction` - `Google.mlKit.vision.faceMeshDetection` - `Kotlin.gradlePlugin`"},{"location":"CHANGELOG/#version-0510-2022-10-25","title":"Version 0.51.0 (2022-10-25)","text":""},{"location":"CHANGELOG/#support-jetpack-compose-bom","title":"Support Jetpack Compose BoM","text":"<p>Yesterday, Google released a BoM for Jetpack Compose. Today we\u2019re introducing first-class support for it.</p> <p>To take advantage of it, you just need to add the dependency on <code>platform(AndroidX.compose.bom)</code>. Just like <code>Firebase.bom</code>, make sure you add it before any dependent dependency:</p> <pre><code>dependencies {\n    implementation(platform(AndroidX.compose.bom)) // Add this FIRST\n    implementation(AndroidX.compose.material3) // Related dependencies AFTER\n    implementation(AndroidX.compose.material3.windowSizeClass) // Same as above\n}\n</code></pre> <p>In case you need to use a pre-release version (alpha, beta, rc\u2026), use the <code>withVersionPlaceholder()</code> function as such:</p> <pre><code>dependencies {\n    implementation(platform(AndroidX.compose.bom)) // Enables the BoM and depends on it\n    implementation(AndroidX.compose.icons.extended) // Uses version defined in the BoM\n    implementation(AndroidX.compose.material3.withVersionPlaceholder()) // Separate version in versions.properties\n}\n</code></pre> <pre><code>// Add Jetpack Compose to a project in seconds with refreshVersions.\n// NEW: The Compose BoM released on Android Dev Summit is supported!\n\n// No need to search for the versions, refreshVersions will do it for you!\n// It will add the latest most stable version, and will even add the updates\n// as comments in the versions.properties file (auto-created on first use).\n\nandroid {\n    buildFeatures.compose = true\n    composeOptions {\n        // Version and updates are in versions.properties\n        kotlinCompilerExtensionVersion = versionFor(AndroidX.compose.compiler)\n    }\n}\n\ndependencies {\n    // Version and updates of the BoM are in versions.properties too.\n    implementation(platform(AndroidX.compose.bom)) // Enables the BoM automatically\n    implementation(AndroidX.compose.runtime)                   // Version from the BoM\n    implementation(AndroidX.compose.icons.extended)            // Version from the BoM\n\n    // What if you need a specific alpha/beta/rc version?\n    // withVersionPlaceholder() detaches the dependency from the BoM.\n    // Version and updates will therefore be in versions.properties\n    implementation(AndroidX.compose.material3.withVersionPlaceholder()) // Not from BoM\n}\n</code></pre>"},{"location":"CHANGELOG/#fix-stabilitylevel-calculation-for-number-less-pre-versions","title":"Fix StabilityLevel calculation for number-less pre-versions","text":"<p>Since last changes in the Version class, versions like 1.7.20-RC and 1.7.20-Beta would be marked as stable instead of respectively ReleaseCandidate and Beta because the logic expected a number in all cases.</p> <p>The number is now optional for all pre-versions, except milestones.</p> <p>To prevent future recurrence of such regression, this commit also adds tests that assert the expected stability level of many known versions from various libraries.</p>"},{"location":"CHANGELOG/#new-dependency-notations_4","title":"New dependency notations:","text":"Click to expand (11)   - `AndroidX.asyncLayoutInflater.appcompat` - `AndroidX.compose.bom` - `AndroidX.dataStore.core.okio` - `AndroidX.graphics.core` - `AndroidX.input.motionPrediction` - `AndroidX.paging.testing` - `AndroidX.test.espresso.device` - `AndroidX.tv.foundation` - `AndroidX.tv.material` - `Firebase.dynamicModuleSupport` - `Google.firebase.dynamicModuleSupport`"},{"location":"CHANGELOG/#version-0502-2022-09-24","title":"Version 0.50.2 (2022-09-24)","text":""},{"location":"CHANGELOG/#minor-change","title":"Minor change","text":"<p>Disable the old <code>refreshVersionsDependenciesMapping</code> and <code>migrateToRefreshVersionsDependenciesConstants</code> Gradle tasks.</p>"},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li><code>versionFor</code> could not work as it should have if it was used in multiple modules with different values: the <code>refreshVersions</code> task would only display the updates of some of them, and mark the other ones as unused. This has been fixed.</li> <li>Running the <code>refreshVersionsCleanup</code> task would log that the <code>gradle/libs.versions.toml</code> file was modified even if it wasn\u2019t, and didn\u2019t exist in the first place. This is now fixed.</li> <li>Version ordering now recognizes random qualifiers instead of marking with an unknown stability level.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_5","title":"New dependency notations:","text":"Click to expand (15)   - `AndroidX.media3.dataSource` - `ApolloGraphQL.adapters` - `ApolloGraphQL.api` - `ApolloGraphQL.ast` - `ApolloGraphQL.httpCache` - `ApolloGraphQL.idlingResource` - `ApolloGraphQL.mockserver` - `ApolloGraphQL.normalizedCacheSqlite` - `ApolloGraphQL.normalizedCache` - `ApolloGraphQL.runtime` - `ApolloGraphQL.testingSupport` - `Google.horologist.dataLayer` - `KotlinX.serialization.bom` - `KotlinX.serialization.json.okio` - `Spring.boot.web`"},{"location":"CHANGELOG/#credits","title":"Credits","text":"<p>Thanks to all the folks that contributed in this release!</p> <ul> <li>Jacob Kwitkoski</li> <li>Florian Levis</li> <li>Seokjae Lee</li> <li>solonovamax</li> <li>Louis CAD</li> <li>Jean-Michel Fayard</li> </ul>"},{"location":"CHANGELOG/#version-0501-2022-09-11","title":"Version 0.50.1 (2022-09-11)","text":""},{"location":"CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li>Fix the \u201cExtension of type \u2018VersionCatalogsExtension\u2019 does not exist.\u201d error.</li> <li>Versions Catalog migration only worked properly if you ran it twice. This has now been fixed!</li> </ul>"},{"location":"CHANGELOG/#version-0500-2022-09-09","title":"Version 0.50.0 (2022-09-09)","text":""},{"location":"CHANGELOG/#support-for-versions-catalogs","title":"Support for Versions Catalogs! \ud83c\udf89","text":"<p>Versions Catalogs are Gradle 7.4+ solution for storing dependencies and versions in a centralized file. Gradle will automatically recognize the <code>gradle/libs.versions.toml</code> file\u2026 and so will refreshVersions!</p> <p>It is similar in spirit to the <code>versions.properties</code> file, and we are happy to add support for it:</p> <ul> <li><code>./gradlew refreshVersions</code> will now add available updates as comments inside the <code>gradle/libs.versions.toml</code> file.</li> <li><code>./gradlew refreshVersionsMigrate --mode=VersionCatalogAndVersionProperties</code> will generate a versions catalog and migrate your build to use it if you don\u2019t have one already.</li> </ul> <p>Currently, we only support the default versions catalog. If you need support for multiple versions catalogs, add your \ud83d\udc4d on this issue.</p> <p>This is a big and new feature, so feel free to provide feedback in this thread, and report issues with the right info if there\u2019s no existing one here.</p>"},{"location":"CHANGELOG/#better-support-for-versionfor-and-jetpack-compose","title":"Better support for <code>versionFor</code>, and Jetpack Compose!","text":""},{"location":"CHANGELOG/#before","title":"Before","text":"<p><code>versionFor</code> was helpful when you need to access a version located in the <code>versions.properties</code> file, but if there was no dependency using it, you\u2019d never see any updates. For projects/modules using Jetpack Compose from Google, that meant you\u2019d never see any updates for the compiler, and you\u2019d need to look it up yourself. Also, the version entry would be marked as unused, or would be the wrong one if you shared it with other Compose artifacts since the compiler now has its own versioning track.</p>"},{"location":"CHANGELOG/#now","title":"Now","text":"<p>Now, passing a dependency notation such as <code>AndroidX.compose.compiler</code> to <code>versionFor</code> is exactly the same as if you used the dependency somewhere in the project:</p> <p>You\u2019ll get all the updates, and if the version is not yet specified in the <code>versions.properties</code> file, as usual, refreshVersions will try to find the latest most stable version available, plus it will also add the available comments for any newer, less stable version. That makes it even easier to start a project with Jetpack Compose!</p> <p>With this in a <code>build.gradle.kts</code> file:</p> <pre><code>android {\n    composeOptions {\n        kotlinCompilerExtensionVersion = versionFor(AndroidX.compose.compiler) // Kotlin DSL\n        kotlinCompilerExtensionVersion = versionFor(project, AndroidX.compose.compiler) // Groovy DSL\n    }\n}\n</code></pre> <p><code>AndroidX.compose.compiler</code> is equivalent to <code>\"androidx.compose.compiler:compiler:_\"</code>.</p> <p>You\u2019ll get that in the <code>versions.properties</code> file if you were on version <code>1.3.0-rc01</code>:</p> <pre><code>version.androidx.compose.compiler=1.3.0-rc01\n##                    # available=1.3.0-rc02\n##                    # available=1.3.0\n</code></pre>"},{"location":"CHANGELOG/#new-page-for-all-the-built-in-dependency-notations","title":"New page for all the built-in dependency notations \ud83d\udcd5","text":"<p>To make it easy to start new projects, new modules, or using a common library, we spent a lot of time adding built-in dependency notations for Kotlin, kotlinx, AndroidX, and more.</p> <p>However, it wasn\u2019t so easy to know that they exist. That\u2019s why we made a dedicated page where you can find them all! Let us know how helpful it is to you!</p>"},{"location":"CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li><code>rejectVersionIf { \u2026 }</code> had an issue: its removal would not be taken into account until the Gradle daemon would be killed. This now behaves correctly.</li> <li>We were ignoring repositories defined in <code>pluginManagement { \u2026 }</code>, which might have led to Gradle plugin updates being missed by refreshVersions. Now, we look up these repositories as well.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_6","title":"New dependency notations:","text":"Click to expand (145)   - `AndroidX.appSearch.builtInTypes` - `AndroidX.compose.runtime.tracing` - `AndroidX.core.uwb` - `AndroidX.core.uwb.rxJava3` - `AndroidX.health.connect.client` - `AndroidX.javascriptEngine` - `AndroidX.lifecycle.runtime.compose` - `AndroidX.room.paging.guava` - `AndroidX.room.paging.rxJava2` - `AndroidX.room.paging.rxJava3` - `AndroidX.tracing.perfetto` - `CashApp.molecule.gradlePlugin` - `CashApp.molecule.runtime` - `CashApp.molecule.test` - `Google.accompanist.drawablePainter` - `Google.accompanist.flowLayout` - `Google.accompanist.navigationAnimation` - `Google.accompanist.navigationMaterial` - `Google.accompanist.permissions` - `Google.accompanist.placeholder` - `Google.accompanist.placeholder.material` - `Google.accompanist.webView` - `Google.ambient.crossDevice` - `Google.horologist.audio` - `Google.horologist.audio.ui` - `Google.horologist.composables` - `Google.horologist.compose.layout` - `Google.horologist.compose.tools` - `Google.horologist.media` - `Google.horologist.media.data` - `Google.horologist.media.ui` - `Google.horologist.media3.backend` - `Google.horologist.networkAwareness` - `Google.horologist.tiles` - `Square.okHttp3.mockWebServer3` - `Square.okHttp3.mockWebServer3.junit4` - `Square.okHttp3.mockWebServer3.junit5` - `Square.okHttp3.android` - `Square.okHttp3.brotli` - `Square.okHttp3.coroutines` - `Square.okHttp3.dnsOverHttps` - `Square.okHttp3.sse` - `Square.okHttp3.tls` - `Square.okHttp3.urlConnection` - `Arrow.core` - `Arrow.fx.coroutines` - `Arrow.fx.stm` - `Arrow.optics` - `Arrow.optics.kspPlugin` - `Arrow.optics.reflect` - `Arrow.stack` - `Arrow.analysis.gradlePlugin` - `Koin.navigation` - `Testing.kotest.extensions.property.arbs` - `Testing.kotest.extensions.property.datetime` - `Ktor.client.contentNegotiation` - `Ktor.client.contentNegotiationTests` - `Ktor.client.gson` - `Ktor.client.jackson` - `Ktor.client.java` - `Ktor.client.okHttp` - `Ktor.client.resources` - `Ktor.plugins.events` - `Ktor.plugins.http` - `Ktor.plugins.http.cio` - `Ktor.plugins.io` - `Ktor.plugins.network` - `Ktor.plugins.networkTls` - `Ktor.plugins.networkTlsCertificates` - `Ktor.plugins.resources` - `Ktor.plugins.serialization` - `Ktor.plugins.serialization.gson` - `Ktor.plugins.serialization.jackson` - `Ktor.plugins.serialization.kotlinx` - `Ktor.plugins.serialization.kotlinx.cbor` - `Ktor.plugins.serialization.kotlinx.json` - `Ktor.plugins.serialization.kotlinx.tests` - `Ktor.plugins.serialization.kotlinx.xml` - `Ktor.server.auth` - `Ktor.server.auth.jwt` - `Ktor.server.auth.ldap` - `Ktor.server.autoHeadResponse` - `Ktor.server.cachingHeaders` - `Ktor.server.callId` - `Ktor.server.callLogging` - `Ktor.server.cio` - `Ktor.server.compression` - `Ktor.server.conditionalHeaders` - `Ktor.server.contentNegotiation` - `Ktor.server.cors` - `Ktor.server.dataConversion` - `Ktor.server.defaultHeaders` - `Ktor.server.doubleReceive` - `Ktor.server.forwardedHeader` - `Ktor.server.freeMarker` - `Ktor.server.hostCommon` - `Ktor.server.hsts` - `Ktor.server.htmlBuilder` - `Ktor.server.httpRedirect` - `Ktor.server.httpRedirect` - `Ktor.server.jte` - `Ktor.server.locations` - `Ktor.server.methodOverride` - `Ktor.server.metrics` - `Ktor.server.metricsMicrometer` - `Ktor.server.mustache` - `Ktor.server.partialContent` - `Ktor.server.pebble` - `Ktor.server.resources` - `Ktor.server.sessions` - `Ktor.server.statusPages` - `Ktor.server.testSuites` - `Ktor.server.thymeleaf` - `Ktor.server.velocity` - `Ktor.server.webjars` - `Ktor.server.websockets` - `Ktor.server` - `Ktor.plugins.websocketSerialization` - `Ktor.plugins.websockets` - `Testing.assertj.core` - `Testing.assertj.db` - `Testing.assertj.guava` - `Testing.assertj.jodaTime` - `Testing.assertj.swing` - `Testing.hamcrest` - `Testing.hamcrest.core` - `Testing.hamcrest.library` - `JetBrains.exposed.core` - `JetBrains.exposed.dao` - `JetBrains.exposed.jdbc` - `KotlinX.dataframe` - `KotlinX.dataframe.arrow` - `KotlinX.dataframe.core` - `KotlinX.dataframe.excel` - `KotlinX.dataframe.dataframe` - `KotlinX.deeplearning.api` - `KotlinX.deeplearning.onnx` - `KotlinX.deeplearning.visualization` - `KotlinX.lincheck` - `KotlinX.lincheck.jvm` - `KotlinX.multik.api` - `KotlinX.multik.default` - `KotlinX.multik.jvm` - `KotlinX.multik.native` - `Spring.boms.springCloud`"},{"location":"CHANGELOG/#credits_1","title":"Credits","text":"<p>Thanks to all the folks that contributed in updating the built-in dependency notations!</p> <ul> <li>Jacob Kwitkoski for <code>CashApp.molecule</code></li> <li>R\u00e9mi Latapy for <code>Google.accompanist</code></li> <li>Yuri Schimke for <code>Google.horologist</code> and <code>Square.okHttp3</code></li> <li>Brady Aiello for <code>Ktor</code></li> <li>Kamalesh for <code>JetBrains.exposed</code>, <code>Testing.assertj</code>, <code>Testing.hamcrest</code></li> <li>doljae for <code>Spring.boms.springCloud</code></li> <li>Johan Reitan for <code>KotlinX.multik</code>, <code>KotlinX.lincheck</code>, <code>KotlinX.deeplearning</code></li> <li>Ryan Fonzi for <code>Arrow</code></li> </ul> <p>And thanks to the GitHub sponsors of the maintainers Louis CAD and Jean-Michel Fayard who didn\u2019t count the hours spent on this project since 2018-2019!</p> <p>We hope you save a lot of time thanks to this project and can therefore leave work early, or pursue more valuable tasks and projects. \ud83d\ude09</p> <p>If you\u2019re not a sponsor yet, please consider becoming one, as a company, as an individual, or even both, it means a lot to us! Just click the heart button at the top of the GitHub repo webpage, follow the steps, and your heart. Thank you!</p>"},{"location":"CHANGELOG/#version-0402-2022-06-01","title":"Version 0.40.2 (2022-06-01)","text":""},{"location":"CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li>Fix a memory leak that led the Gradle daemon to eventually suffer from a lot of GC overhead before running out of memory when a Gradle plugin had its version managed by refreshVersions. We\u2019ve done extensive tests to ensure we fixed this for good, and the CI now checks for leaks in the Gradle daemon to prevent future recurrence. Note that if you were using Gradle configuration cache, you were likely to encounter this issue less often.</li> <li>Fix the <code>AndroidX.wear.tiles.material</code> dependency notation that was pointing to wrong coordinates because of a typo. The test that was designed to catch this has been fixed to prevent future recurrence.</li> </ul> <p>Thanks to @yacine-ser for raising this memory leak issue along with a hint on the culprit, it was very helpful in reproducing and fixing the leak.</p>"},{"location":"CHANGELOG/#new-dependency-notations_7","title":"New dependency notations:","text":"<ul> <li>AndroidX.camera.mlKitVision</li> <li>AndroidX.compose.material3.windowSizeClass</li> <li>AndroidX.compose.ui.text.googleFonts</li> <li>AndroidX.core.performance</li> <li>AndroidX.customView.poolingContainer</li> <li>AndroidX.health.connectClient</li> <li>AndroidX.metrics.performance</li> <li>AndroidX.test.ext.junit.gTest</li> <li>AndroidX.test.ext.junit.ktx (was previously AndroidX.test.ext.junitKtx)</li> <li>AndroidX.wear.watchFace.complications.rendering</li> <li>Google.android.material.composeThemeAdapter3</li> </ul>"},{"location":"CHANGELOG/#version-0401-2022-02-06","title":"Version 0.40.1 (2022-02-06)","text":""},{"location":"CHANGELOG/#fixes_4","title":"Fixes","text":"<ul> <li>Improved support of Gradle configuration cache. In the previous release, if you ran the <code>refreshVersions</code> task twice in a row with configuration cache enabled, the second run would fail, even in warning mode. It\u2019s now fixed.</li> <li>To make refreshVersions compatible with GCS (Google Cloud Storage) hosted maven repositories (which can be helpful for company/team internal libraries), we were using the official library from Google. Unfortunately, this led to dependency hell to some of our users because it then requires a specific version of Guava, which could be different from the one required by other plugins, and the one from refreshVersions would prevail. So, to resolve these problems, we replaced our implementation with one that reuses Gradle\u2019s built-in <code>GcsClient</code>, and we\u2019re very happy with that because it also has the benefit of reducing the total size of refreshVersions when we include its dependencies. Note that this is using internal Gradle APIs, but we\u2019ve seen that they didn\u2019t change in 5 years, and the code path is executed only if you have gcs backed repositories in your project.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_8","title":"New dependency notations:","text":"<ul> <li>AndroidX.glance.wearTiles</li> <li>AndroidX.wear.tiles.material</li> <li>Google.android.maps<ul> <li>compose</li> <li>utils</li> <li>utils.ktx</li> <li>ktx</li> <li>rx</li> <li>places<ul> <li>ktx</li> <li>rx</li> </ul> </li> </ul> </li> <li>ReactiveX<ul> <li>rxJava2<ul> <li>rxAndroid</li> <li>rxKotlin</li> </ul> </li> <li>rxJava3<ul> <li>rxAndroid</li> <li>rxKotlin</li> </ul> </li> </ul> </li> <li>JakeWharton<ul> <li>rxBinding3<ul> <li>appcompat</li> <li>core</li> <li>drawerLayout</li> <li>leanback</li> <li>material</li> <li>recyclerview</li> <li>slidingPaneLayout</li> <li>swipeRefreshLayout</li> <li>viewPager2</li> <li>viewPager</li> </ul> </li> <li>rxBinding4<ul> <li>appcompat</li> <li>core</li> <li>drawerLayout</li> <li>leanback</li> <li>material</li> <li>recyclerview</li> <li>slidingPaneLayout</li> <li>swipeRefreshLayout</li> <li>viewPager2</li> <li>viewPager</li> </ul> </li> <li>rxRelay2</li> <li>rxRelay3</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#credits_2","title":"Credits","text":"<p>Thanks to Mike Gray for the contribution in adding ReactiveX, RxBinding, and RxRelay dependency notations!</p>"},{"location":"CHANGELOG/#version-0400-2022-01-24","title":"Version 0.40.0 (2022-01-24)","text":""},{"location":"CHANGELOG/#new-features","title":"New features","text":"<ul> <li>We are very happy to announce that refreshVersions now supports Gradle configuration cache! Gradle configuration is all about saving time, which is also the mission of refreshVersions, albeit in a different situation, so it made a lot of sense to not step on that feature Gradle engineers worked hard on. Note that the <code>refreshVersions</code> task itself is not compatible with configuration cache because it\u2019s impossible with the current Gradle APIs.</li> <li>Error tolerance: The <code>refreshVersions</code> task will no longer fail if there\u2019s a problem getting versions from a repository. Now, it will add contextual comments in the <code>versions.properties</code> file, so you know what failed, and don\u2019t get fully blocked next time jcenter or another repository undergoes an outage. This should also help if you\u2019re running the <code>refreshVersions</code> task through an unstable internet connection and some network calls fail because of that.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_9","title":"New dependency notations:","text":"<ul> <li>Google.modernStorage:<ul> <li>bom</li> <li>permissions</li> <li>photoPicker</li> <li>storage</li> </ul> </li> <li>Google.android.openSourceLicensesPlugin</li> <li>Google.android.playServices:<ul> <li>appset</li> <li>auth.apiPhone</li> <li>auth.blockstore</li> <li>basement</li> <li>cronet</li> <li>fido</li> <li>openSourceLicenses</li> <li>passwordComplexity</li> <li>recaptcha</li> <li>tagmanager</li> </ul> </li> <li>Google.android.versionMatcherPlugin</li> </ul>"},{"location":"CHANGELOG/#credits_3","title":"Credits","text":"<p>Thanks to Kamalesh for the contribution in adding dependency notations!</p>"},{"location":"CHANGELOG/#version-0302-2022-01-09","title":"Version 0.30.2 (2022-01-09)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>We are now shutting down the thread-pool from kotlinx.coroutines that we\u2019re using when the build finishes (<code>Dispatchers.shutdown()</code>). We believe it caused memory leaks in the Gradle Daemon, and this change, made possible since kotlinx.coroutines 1.6.0 should fix the last memory leak cause.</li> <li>The versions of dependencies from the <code>androidx.test</code> family started diverging, so we changed replaced the <code>version.androidx.test</code> version key with more specific ones. The migration will be done automatically on upgrade of refreshVersions, without upgrading the versions of <code>androidx.tests</code> dependencies themselves.</li> </ul>"},{"location":"CHANGELOG/#new-feature","title":"New feature","text":"<ul> <li>We now support fetching updates on plain-text http repositories. We evaluated the security risks, and for the case of refreshVersions itself, there is none that is significant (the worst possibility is crashing the build under attack), and if you\u2019re not using plain-text http repositories in the first place in your project, this doesn\u2019t apply at all anyway. We added support for this because some of our users need it for local maven repositories.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_10","title":"New dependency notations:","text":"<ul> <li>Android.billingClient</li> <li>Android.billingClient.ktx</li> <li>Android.installReferrer</li> <li>Android.tools:<ul> <li>desugarJdkLibs</li> <li>r8</li> <li>build.gradlePlugin</li> </ul> </li> <li>CashApp.licenseeGradlePlugin</li> <li>CashApp.sqlDelight:<ul> <li>extensions:<ul> <li>androidPaging3</li> <li>androidPaging</li> <li>rxJava3</li> <li>rxJava2</li> </ul> </li> <li>drivers.sqlJs</li> </ul> </li> <li>Google.android.fhir:<ul> <li>dataCapture</li> <li>engine</li> <li>workflow</li> </ul> </li> <li>Google.android.flexbox</li> <li>Google.android.playServices:<ul> <li>cast:<ul> <li>framework</li> <li>tv</li> </ul> </li> <li>instantApps</li> <li>maps</li> <li>mlKit.vision.imageLabeling.custom</li> <li>mlKit.naturalLanguage.languageIdentification</li> <li>pay</li> <li>wallet</li> </ul> </li> <li>Google.mlKit:<ul> <li>playStoreDynamicFeatureSupport</li> <li>naturalLanguage.entityExtraction</li> <li>vision:<ul> <li>selfieSegmentation</li> <li>textRecognition<ul> <li>chinese</li> <li>devanagari</li> <li>japanese</li> <li>korean</li> </ul> </li> </ul> </li> </ul> </li> <li>Google.modernStorage:<ul> <li>fileSystem</li> <li>mediaStore</li> </ul> </li> <li>Google.oboe</li> <li>Ktor.client.darwin</li> <li>Kotlin.scriptRuntime</li> <li>KotlinX.serialization.hocon</li> <li>Square.logcat</li> <li>Square.moshi.adapters</li> <li>Touchlab.kermit<ul> <li>bugsnagTest</li> <li>bugsnag</li> <li>crashlyticsTest</li> <li>crashlytics</li> <li>gradlePlugin</li> <li>test</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#other-changes","title":"Other changes","text":"<p>We also removed many obsolete dependency notations from refreshVersions. Just like for the 0.30.0 release, this should not break your build as we implemented a robust replacement mechanism that also inserts migration guidance comments. \u2728</p>"},{"location":"CHANGELOG/#credits_4","title":"Credits","text":"<p>Thanks to Brady Aiello, Mike Gray, and Kamalesh for their contributions in adding dependency notations!</p>"},{"location":"CHANGELOG/#version-0301-2021-12-21","title":"Version 0.30.1 (2021-12-21)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>Fix Gradle sync for projects using buildSrc (#474)</li> <li>Support buildSrc modules that have no plugin declared</li> </ul>"},{"location":"CHANGELOG/#version-0300-2021-12-19","title":"Version 0.30.0 (2021-12-19)","text":""},{"location":"CHANGELOG/#potentially-breaking-change_1","title":"Potentially breaking change","text":"<p>We raised the minimum supported Gradle version to 6.8, because we started to use Kotlin 1.4 features, and Gradle pins the stdlib version. Since at the time of writing, the latest Gradle version is 7.3, we believe it won\u2019t actually block any of our users. We have a short section about updating Gradle on our website here, feel free to check it out if it can help you.</p>"},{"location":"CHANGELOG/#new-features_1","title":"New features","text":""},{"location":"CHANGELOG/#repositories-declared-in-dependencyresolutionmanagement-are-now-supported-gradle-7","title":"Repositories declared in <code>dependencyResolutionManagement</code> are now supported (Gradle 7+)","text":"<p>Since Gradle 7, you can declare repositories of the entire Gradle project (including all subprojects and their buildscript) in the <code>dependencyResolutionManagement</code> block in the <code>settings.gradle[.kts]</code> file. Unfortunately, refreshVersions didn\u2019t support it, so, unless you also kept repositories declared with <code>allprojects</code>, or per project, you would end up with all version entries in the <code>versions.properties</code> file marked as unused after running the <code>refreshVersions</code> task, and you\u2019d not see the newer updates.</p> <p>This release resolves this issue, and we are eager to use it in our projects ourselves.</p>"},{"location":"CHANGELOG/#update-on-built-in-dependency-notations","title":"Update on built-in dependency notations","text":"<p>Sometimes, libraries get deprecated, or the maintainers change the maven coordinates. When it happens, this fact is unfortunately not included in the <code>maven-metadata.xml</code> files, or any other standard metadata. That means tools like refreshVersions will believe you\u2019re on the latest versions, when you\u2019re not, because it lacks the necessary information.</p> <p>One example is Google that changed the maven coordinates of all their AndroidX Wear Watchface artifacts several weeks ago.</p> <p>It took us time to catch-up with this change because we wanted to design a generic mechanism for this recurrent problem, and provide the best experience for you, and ourselves.</p> <p>From now on, we have the ability to remove old or deprecated built-in dependency notations in refreshVersions, and doing so will not break your builds, nor will it change the dependencies of your project. However, it\u2019ll help you notice the deprecation, and it\u2019ll help you switch to the replacement dependencies, if any.</p> <p>The way it works is that we keep a versioned list of all the removals, and on refreshVersions upgrade, an automatic replacement will put back the hardcoded maven coordinates, using the version placeholder, and it will add our handwritten TODO/FIXME comments, along with a perfectly aligned replacement suggestion if there is any, so that moving to the newer artifact is as easy as upgrading to a newer version in the <code>versions.properties</code> file. We designed the system so that it cannot break your build, even if you were using <code>withVersion(\u2026)</code> or other <code>DependencyNotation</code> extensions, even if you have code comments or special string literals.</p> <p>It also supports the case where we just move a dependency notation to another place, or change its name, without changing the maven coordinates.</p> <p>Because of this change, it\u2019s important that you check the git diff after upgrading refreshVersions and running the first Gradle reload/sync/build, so you can see if there\u2019s been any changes, and if you might want to switch to any replacement dependencies.</p> <p>This change will enable us to keep the built-in dependency notations updated with less effort, so we\u2019re very happy to have it ready, and fully tested.</p> <p>We\u2019ve already started to take advantage of it to clean up all the discontinued artifacts we found in AndroidX.</p>"},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug fixes","text":"<ul> <li>Repositories declared in the <code>dependencyResolutionManagement</code> block were ignored. Now, they are taken into account.</li> <li>The kotest extensions dependencies were previously wrongly sharing their version as per refreshVersions rules. Now, they each have their independent, own version key.</li> <li>The <code>refreshVersionsMigrate</code> task wasn\u2019t inserting new entries in alphabetical order. Now it is.</li> <li>The <code>refreshVersionsMigrate</code> task wasn\u2019t migrating buildscript dependencies. Now it is.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_11","title":"New dependency notations:","text":"<ul> <li>AndroidX.appSearch.platformStorage</li> <li>AndroidX.benchmark.macro</li> <li>AndroidX.camera.video</li> <li>AndroidX.carApp:<ul> <li>automotive</li> <li>projected</li> </ul> </li> <li>AndroidX.compose:<ul> <li>animation.graphics</li> <li>material3</li> </ul> </li> <li>AndroidX.core.remoteViews</li> <li>AndroidX.dragAndDrop</li> <li>AndroidX.emoji2.bundled</li> <li>AndroidX.glance.appWidget</li> <li>AndroidX.glance</li> <li>AndroidX.leanback.grid</li> <li>AndroidX.lifecycle.runtimeTesting</li> <li>AndroidX.media3:<ul> <li>cast</li> <li>common</li> <li>database</li> <li>datasource:<ul> <li>cronet</li> <li>okhttp</li> <li>rtmp</li> </ul> </li> <li>decoder</li> <li>exoPlayer:<ul> <li>dash</li> <li>hls</li> <li>ima</li> <li>rtsp</li> <li>workmanager</li> </ul> </li> <li>extractor</li> <li>session</li> <li>testUtils.robolectric</li> <li>testUtils</li> <li>transformer</li> <li>ui.leanback</li> <li>ui</li> </ul> </li> <li>AndroidX.multidex.instrumentation</li> <li>AndroidX.paging.guava</li> <li>AndroidX.room:<ul> <li>paging</li> <li>rxJava3</li> </ul> </li> <li>AndroidX.wear.tiles.testing</li> <li>AndroidX.wear.watchFace:<ul> <li>complications.dataSourceKtx</li> <li>complications.dataSource</li> <li>editor</li> </ul> </li> <li>KotlinX.coroutines.bom</li> <li>Square.moshi.adapters</li> <li>Testing.junit:<ul> <li>bom</li> <li>jupiter: (moved from Testing.junit)<ul> <li>api (moved from Testing.junit.api)</li> <li>engine (moved from Testing.junit.engine)</li> <li>migrationSupport (moved from Testing.junit.migrationSupport)</li> <li>params (moved from Testing.junit.params)</li> </ul> </li> </ul> </li> <li>Testing.kotest.framework:<ul> <li>api</li> <li>dataset</li> </ul> </li> </ul> <p>Thanks to Emil Kantis for the kotest dependencies fixes! Thanks to Kamalesh for the help in updating AndroidX dependency notations! Thanks to Simon Marquis for adding Square.moshi.adapters, and helping contributors using Windows!</p>"},{"location":"CHANGELOG/#version-0230-2021-09-28","title":"Version 0.23.0 (2021-09-28)","text":""},{"location":"CHANGELOG/#bug-fix_5","title":"Bug fix","text":"<p>Fix a bug that broke standalone buildSrc builds.</p>"},{"location":"CHANGELOG/#version-0220-2021-09-27","title":"Version 0.22.0 (2021-09-27)","text":""},{"location":"CHANGELOG/#bug-fix_6","title":"Bug fix","text":"<p>Fix a regression that brought a <code>KotlinNullPointerException</code> in the build. We apologize for the issue. Thanks to Marcin and Craig for the report.</p>"},{"location":"CHANGELOG/#new-dependency-notations_12","title":"New dependency notations:","text":"<ul> <li>AndroidX.compose.ui.toolingPreview</li> <li>Chucker</li> <li>KotlinX.cli</li> <li>KotlinX.datetime</li> </ul> <p>Thanks to Filip Czaplicki, who contributed to the new dependency notations!</p>"},{"location":"CHANGELOG/#version-0210-2021-09-07","title":"Version 0.21.0 (2021-09-07)","text":""},{"location":"CHANGELOG/#new-feature_1","title":"New feature","text":"<p>We now support npm dependencies for Kotlin/JS!</p> <p>Just put the version placeholder (<code>_</code>) in place of the version, and you\u2019re good to go.</p> <p>The version keys follow a simple naming scheme where their id is prefixed with <code>npm</code>, here are two examples: - <code>version.npm.react=17.0.2</code> - <code>version.npm.@googlemaps/js-api-loader=1.12.2</code></p> <p>Special thanks to NikkyAI who authored the feature, and pair-programmed with us to refine it!</p>"},{"location":"CHANGELOG/#improvements","title":"Improvements","text":"<p>Before this release, when we added new dependency notations and shorter version keys, it could lead to an unwanted upgrade of the dependency in the project upgrading refreshVersions. With this release, we make sure to copy the same version if we add or change the version key, and it will also work if we decide to remove one. This ensures that upgrading refreshVersions will not be able to affect your application or library.</p> <p>Thanks to Brady Aiello from Touchlab for helping out via pair-programming!</p>"},{"location":"CHANGELOG/#new-dependency-notations_13","title":"New dependency notations:","text":"<ul> <li>Koin (new group with several dependencies)</li> <li>Touchlab.stately (new group with several dependencies)</li> <li>RussHWolf.multiplatformSettings (new group with several dependencies)</li> </ul> <p>Thanks to Brady Aiello again, who contributed to these new dependency notations!</p>"},{"location":"CHANGELOG/#version-0200-2021-08-23","title":"Version 0.20.0 (2021-08-23)","text":""},{"location":"CHANGELOG/#announcement","title":"Announcement","text":"<p>We are now ready to accept dependency notation contributions for high-quality and popular dependencies from the Kotlin ecosystem!</p> <p>Look for issues with the <code>Dependency notations</code> and <code>up-for-grabs</code> tags to find one you can directly contribute to, or submit a new issue to ask for a new one to be added. We updated the contributing guide on the website, it now has a guide dedicated to it here.</p>"},{"location":"CHANGELOG/#new-features_2","title":"New features","text":"<ul> <li>refreshVersions will now add <code>## unused</code> comments on top of unused entries in the <code>versions.properties</code> file after you run the <code>refreshVersions</code> task, so you know which ones are obsolete and can be removed.</li> <li>The new <code>rejectVersionIf { \u2026 }</code> predicate available in the <code>refreshVersions { \u2026 }</code> extension in your <code>settings.gradle[.kts]</code> file will allow you to filter any kind of versions you don\u2019t want to know about. It can be handy to filter snapshots out for example.</li> <li>Most of our dependency notations now provide more flexibility with 3 new extension functions: <code>withVersionPlaceholder()</code>, <code>withVersion(\u2026)</code>, and <code>withoutVersion()</code>.</li> </ul>"},{"location":"CHANGELOG/#change-potentially-breaking","title":"Change (potentially breaking)","text":"<ul> <li>If you use a BoM from the built-in dependency notations, it must always appear before dependencies from the group it controls, or you\u2019ll see an error message that will fail the Gradle build. We do this because we can\u2019t switch on usage of the BoM for linked dependencies that have already been evaluated by Gradle.</li> </ul>"},{"location":"CHANGELOG/#improvements_1","title":"Improvements","text":"<p>The <code>refreshVersionsMigrate</code> will now use the built-in dependency notations if they match existing dependencies.</p>"},{"location":"CHANGELOG/#new-dependency-notations_14","title":"New dependency notations:","text":"<ul> <li>AndroidX:<ul> <li>benchmark.macroJunit4</li> <li>core.splashscreen</li> <li>games:<ul> <li>activity</li> <li>controller</li> <li>framePacing</li> <li>performanceTuner</li> <li>textInput</li> </ul> </li> <li>navigation.testing</li> <li>wear.compose:<ul> <li>foundation</li> <li>material</li> </ul> </li> <li>window</li> <li>java</li> <li>rxJava2</li> <li>rxJava3</li> <li>testing</li> </ul> </li> <li>COIL:<ul> <li>compose</li> <li>composeBase</li> </ul> </li> <li>Firebase:<ul> <li>cloudMessagingDirectBoot</li> <li>Firebase.mlModelDownloaderKtx</li> <li>Firebase.mlModelDownloader</li> </ul> </li> <li>Kodein.di (new group with many dependencies)</li> <li>Kotlin.test (which is compatible with multiplatform projects since Kotlin 1.5)</li> <li>KotlinX.html (compatible with multiplatform projects)</li> <li>Ktor.features.serialization</li> <li>Http4k (new group with many dependencies)</li> <li>Splitties.alertdialogMaterial</li> <li>Square<ul> <li>okHttp3.bom</li> <li>okHttp3 (shortcut to existing okHttp3.okHttp)</li> <li>retrofit2.converter.wire</li> <li>retrofit2 (shortcut to existing retrofit2.retrofit)</li> </ul> </li> <li>Spring (new group with many dependencies)</li> </ul>"},{"location":"CHANGELOG/#version-0110-2021-08-03","title":"Version 0.11.0 (2021-08-03)","text":""},{"location":"CHANGELOG/#new-feature_2","title":"New feature","text":"<p>Add task refreshVersionsMigrate that adds all missing entries in versions.properties and try to migrate the <code>build.gradle(.kts)</code> and other known files like <code>libraries.gradle</code> so that the version placeholder <code>_</code> is used everywhere. Please try it out and give us your feedback for refreshVersionsMigrate</p>"},{"location":"CHANGELOG/#fixes_5","title":"Fixes","text":"<ul> <li>Plugins org.jetbrains.kotlinx.benchmark should not use key version.kotlin</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_15","title":"New dependency notations","text":"<ul> <li>Ktor.features.serialization</li> <li>AndroidX.navigation.testing</li> <li>Testing.kotestExtensions who replaces Testing.kotest.extensions in Kotest &gt;= 4.5.0</li> </ul>"},{"location":"CHANGELOG/#version-0101-2021-06-10","title":"Version 0.10.1 (2021-06-10)","text":""},{"location":"CHANGELOG/#new-features_3","title":"New features","text":"<ul> <li>In Android projects, if you used the version placeholder (<code>_</code>) directly in <code>build.gradle(.kts)</code> files, Android lint would trigger an unwanted warning, or error in the case of the Android build tools (aka. AGP, the Android Gradle Plugin). To avoid this inconvenience, running the refreshVersions task will now automatically check if it\u2019s running on an Android project, and in such cases, will edit (safely) the <code>lint.xml</code> file, creating it if needed, and add the needed rules to have these specific warnings and errors ignored.</li> </ul>"},{"location":"CHANGELOG/#fixes_6","title":"Fixes","text":"<ul> <li>Add missing version placeholder (<code>_</code>) for the <code>Google.android.material.composeThemeAdapter</code> dependency notation.</li> <li>Fix a bug that prevented from using the correct version of <code>org.jetbrains.kotlinx.benchmark</code> and any other Gradle plugin with an id starting with <code>org.jetbrains.kotlinx</code> because it matched over <code>org.jetbrains.kotlin</code> as well. We are now matching on <code>org.jetbrains.kotlin.</code> to avoid this issue.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_16","title":"New dependency notations:","text":"<ul> <li>AndroidX:<ul> <li>emoji2<ul> <li>views-helper</li> <li>views</li> </ul> </li> <li>health.servicesClient</li> <li>security.appAuthenticatorTesting</li> </ul> </li> <li>Google.accompanist.insets.ui</li> </ul>"},{"location":"CHANGELOG/#version-0100-2021-05-13","title":"Version 0.10.0 (2021-05-13)","text":""},{"location":"CHANGELOG/#new-features_4","title":"New features","text":"<ul> <li>There\u2019s a new <code>versionFor</code> function that takes a dependency notation, or a version key, and returns the corresponding version that is in the <code>versions.properties</code> file. For example, if you use Jetpack Compose, you can leverage it to set <code>kotlinCompilerExtensionVersion</code> with <code>versionFor(AndroidX.compose.ui)</code>. Groovy DSL users can find it in the <code>Versions</code> class.</li> <li>Support updates of settings plugins in <code>settings.gradle.kts</code> and <code>settings.gradle</code> files (including refreshVersions itself).</li> <li>Support getting versions from Google Cloud Storage backed repositories. This can be helpful if you need to update private artifacts hosted there. Thanks to NikkyAI for the contribution!</li> </ul>"},{"location":"CHANGELOG/#changes","title":"Changes","text":"<ul> <li>Setting up refreshVersions has been significantly simplified: Now, it\u2019s simply a plugin that must be applied in the <code>settings.gradle.kts</code> or <code>settings.gradle</code> file. Note that if you want to apply it to <code>buildSrc</code> as well, there\u2019s a gotcha regarding defining the version. The best thing is that on upgrade, refreshVersions will automatically replace the old &amp; verbose bootstrap with the new plugin setup, and that works for buildSrc special case as well. We made many tests to ensure that this logic is reliable, doesn\u2019t break any code, doesn\u2019t remove important comments, and doesn\u2019t affect custom configuration in any way.</li> <li>Bintray sunset resiliency: If refreshVersions encounters an HTTP 403 response on a bintray repository or on jcenter, it will consider the artifact to not be in this repository instead of crashing (but you can/should still remove bintray repo declarations anyway since it has been sunset).</li> <li>Missing short version key rules have been added for many dependency notations groups in the <code>Testing</code> object, and for <code>Orchid</code>.</li> </ul>"},{"location":"CHANGELOG/#potentially-breaking-changes","title":"Potentially breaking changes","text":"<ul> <li>The fix of the <code>Square.sqlDelight.coroutinesExtensions</code> dependency notation can lead to such an error: <code>Failed to resolve: coroutines-extensions-1.4.4-_</code>. If you get a similar error on upgrade, it\u2019s because you applied a fix like that one: <code>Square.sqlDelight.coroutinesExtensions + \":_\"</code>. You now can (must) remove it.</li> <li>A bunch of new version key rules have been added, which means you might have changes of version keys, and because we currently don\u2019t have a migration facility for those, it might cause unwanted upgrades. Consequently, especially for Android projects, we recommend checking/verifying the changes made by refreshVersions after the first Gradle sync/reload/build that follows the upgrade.</li> </ul>"},{"location":"CHANGELOG/#fixes_7","title":"Fixes","text":"<ul> <li>Authentication for maven repositories should now work correctly. Should, because it can only work using internal Gradle APIs for the time being (though there\u2019s a safeguard to not crash if the API changes). Thanks to Mayank Kharbanda for the PR!</li> <li>Custom <code>extraArtifactVersionKeyRules</code> could not be taken into account if there was an overlapping rule already present in refreshVersions, even if it was more specific. That ordering issue has now been fixed, the most specific rule will now always be the one applied.</li> <li>If you had issues with some recent AndroidX artifacts, and their version key, they should all be fixed now, and there\u2019s all the latest dependency notations.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_17","title":"New dependency notations","text":"<ul> <li>AndroidX:<ul> <li>activity.ktx</li> <li>activity.compose</li> <li>appSearch</li> <li>appSearch.compiler</li> <li>appSearch.localStorage</li> <li>biometricKtx</li> <li>carApp</li> <li>carApp.testing</li> <li>compose:<ul> <li>material.ripple</li> <li>runtime.rxJava3</li> <li>runtime.saveable</li> <li>ui:<ul> <li>test</li> <li>testJunit4</li> <li>testManifest</li> <li>tooling</li> <li>toolingData</li> <li>viewBinding</li> </ul> </li> </ul> </li> <li>constraintLayoutCompose</li> <li>core.googleShortcuts</li> <li>dataStore:<ul> <li>core</li> <li>rxJava2</li> <li>rxJava3</li> <li>preferences:<ul> <li>core</li> <li>rxJava2</li> <li>rxJava3</li> </ul> </li> </ul> </li> <li>hilt.navigationCompose</li> <li>hilt.navigationFragment</li> <li>leanback.paging</li> <li>leanback.preference</li> <li>leanback.tab</li> <li>lifecycle.viewModelCompose</li> <li>navigation.compose</li> <li>navigation.dynamicFeaturesFragment</li> <li>paging.compose</li> <li>paging.rxJava3</li> <li>savedStateKtx</li> <li>security.appAuthenticator</li> <li>transitionKtx</li> <li>wear:<ul> <li>complications.data</li> <li>complications.provider</li> <li>input</li> <li>inputTesting</li> <li>ongoing</li> <li>phoneInteractions</li> <li>remoteInteractions</li> <li>watchFace</li> <li>watchFace.guava</li> <li>watchFace.client</li> <li>watchFace.clientGuava</li> <li>watchFace.complicationsRendering</li> <li>watchFace.data</li> <li>watchFace.editor</li> <li>watchFace.editorGuava</li> <li>watchFace.style</li> <li>tiles:<ul> <li>proto</li> <li>renderer</li> </ul> </li> </ul> </li> <li>work.multiprocess</li> <li>work.rxJava3</li> </ul> </li> <li>Firebase:<ul> <li>analyticsKtx</li> <li>authenticationKtx</li> <li>cloudMessagingKtx</li> <li>crashlyticsKtx</li> <li>dynamicLinksKtx</li> <li>performanceMonitoringKtx</li> </ul> </li> <li>Google:<ul> <li>accompanist:<ul> <li>appcompatTheme</li> <li>coil</li> <li>flowlayout</li> <li>glide</li> <li>imageloadingCore</li> <li>insets</li> <li>pager.indicators</li> <li>pager</li> <li>swiperefresh</li> <li>systemuicontroller</li> </ul> </li> <li>android.material.composeThemeAdapter</li> <li>dagger.hilt.compiler</li> </ul> </li> <li>Testing.kotest.assertions.kotlinxDateTime</li> </ul>"},{"location":"CHANGELOG/#special-mentions","title":"Special mentions","text":"<p>Thanks to all the folks that joined Louis CAD in pair-programming sessions:</p> <ul> <li> Waqas Ahmed</li> <li> Benjamin Orsini</li> <li> Zahra Heydari</li> <li> Alexi Bre</li> <li>\u2026and of course the original author and maintainer  Jean-Michel Fayard</li> </ul> <p>These were critical to ensure thorough testing, and great quality, all while keeping motivation to keep going.</p> <p>We\u2019re very grateful for your time and help, and we think our users will be as well. \ud83d\ude4f</p> <p>Also, thanks to all the folks that reported issues. It was very helpful to prioritize on our side.</p>"},{"location":"CHANGELOG/#version-097-2020-10-16","title":"Version 0.9.7 (2020-10-16)","text":""},{"location":"CHANGELOG/#fixes_8","title":"Fixes","text":"<ul> <li>Running the <code>refreshVersions</code> task twice or more would fail with \u201cexecutor rejected\u201d as an error message, until the Gradle daemon is killed. This has now been fixed. (Issue #263)</li> <li>The <code>refreshVersions</code> task was failing after the latest Gradle release candidate was superseded by the stable release because the API would return an empty JSON object after this, which we didn\u2019t expect.</li> <li>(Minor) We fixed a typo in a diagnostic task name (<code>refreshVersionsDependenciesMapping</code>)</li> </ul>"},{"location":"CHANGELOG/#version-096-2020-10-12","title":"Version 0.9.6 (2020-10-12)","text":""},{"location":"CHANGELOG/#fixes_9","title":"Fixes","text":"<ul> <li>This release fixes a major memory leak that would make Gradle Daemons unusable after several builds (or Gradle syncs/imports). We are very sorry for that issue, and the annoyance it might have caused. We experienced it too as users, and that\u2019s why we are bringing the fix now. We took the necessary measures to avoid future recurrence of such memory leaks.</li> <li>Fix of a bug that\u2019d make the first Gradle sync  after adding a dependency fail.</li> </ul>"},{"location":"CHANGELOG/#breaking-change","title":"Breaking change","text":"<ul> <li>If you were using Jetpack Compose, the compiler dependency had its maven coordinates changed in version 1.0.0-alpha04. We updated the <code>AndroidX.compose.compiler</code> dependency notation, which means it now works only for Compose 1.0.0-alpha04 and more future versions.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_18","title":"New dependency notations","text":"<ul> <li>Google.android.playServices.mlKit</li> <li>Google.mlKit</li> <li>KotlinX.serialization.json</li> </ul>"},{"location":"CHANGELOG/#deprecated","title":"Deprecated","text":"<p>Firebase ML Kit has been rebranded to Google ML Kit along with API and feature changes since 2020-08-14 update, so we deprecated the <code>Firebase.mlKit</code> dependencies and introduced new ones in <code>Google.android.playServices.mlKit</code> and <code>Google.mlKit</code>.</p>"},{"location":"CHANGELOG/#new-features_5","title":"New features","text":"<ul> <li>refreshVersions will now warn you when Gradle is not up-to-date, and will give you the commands to run to update it for you to copy/paste and run. It works if you\u2019re using a release candidate, and also if you\u2019re using a nightly version!</li> </ul>"},{"location":"CHANGELOG/#version-095-2020-08-21","title":"Version 0.9.5 (2020-08-21)","text":"<p>This is a major release that brings surface-level and internal changes, paving the way for the upcoming 1.0 release.</p> <p>The plugin setup/bootstrap has changed, so check out the updated documentation in Setup.</p>"},{"location":"CHANGELOG/#new-features_6","title":"New features","text":"<ul> <li>Self update discovery. RefreshVersions will check for its own updates, and add available comments in the <code>settings.gradle[.kts]</code> file if needed for easy upgrade. This allows you to get future improvements conveniently.</li> <li>Support for <code>buildscript</code> dependencies. It now works just like regular dependencies.</li> <li>First class support for <code>buildSrc</code></li> <li>Support maven repositories with basic authentication (aka. credentials with username and password)</li> <li>Going forward, refreshVersions will be able to auto-migrate any breaking changes a new version would introduce in your <code>versions.properties</code>, <code>build.gradle</code> and <code>build.gradle.kts</code> files in. This version of refreshVersions integrates the facility to let future versions of refreshVersions that migration is needed, and from which version. This is a very important change that ensures you can keep your projects updated with the least effort possible.</li> </ul>"},{"location":"CHANGELOG/#new-dependency-notations_19","title":"New dependency notations","text":"<ul> <li>Kotlin.stdlib (for the base version of the stdlib)</li> <li>KotlinX:</li> <li>html</li> <li>Coroutines:<ul> <li>reactive</li> <li>reactor</li> <li>rx2</li> <li>rx3</li> </ul> </li> <li>Serialization:<ul> <li>core (replaces runtime artifacts since 1.0.0-RC)</li> <li>protobuf</li> <li>cbor</li> <li>properties</li> </ul> </li> <li>io</li> <li>reflect.lite</li> <li>nodeJs</li> <li>COIL, a **Co**routine **I**mage **L**oader for Android.</li> <li>Square:</li> <li>LeakCanary</li> <li>KotlinPoet</li> <li>Wire</li> <li>SqlDelight</li> <li>Moshi</li> <li>Picasso</li> <li>okio</li> <li>Retrofit2:<ul> <li>Adapter:</li> <li>java8   (renamed from retrofitJava8)</li> <li>rxJava1 (renamed from retrofitRxJava1)</li> <li>rxJava2 (renamed from retrofitRxJava2)</li> <li>rxJava3</li> </ul> </li> <li>KoTest (in the <code>Testing</code> object)</li> <li>CashApp:</li> <li>sqlDelight (alias to Square.sqlDelight)</li> <li>turbine</li> <li>Copper</li> <li>Google:</li> <li>Dagger (including hilt for Android)</li> <li>Android:<ul> <li>browserHelper</li> </ul> </li> <li>JakeWharton:</li> <li>picnic</li> <li>wormholeGradlePlugin</li> <li>confundusGradlePlugin</li> <li>moshi.shimo</li> <li>AndroidX:</li> <li>Gaming</li> <li>Hilt</li> <li>startup</li> <li>tracing</li> <li>vectorDrawableSeekable</li> <li>Window</li> <li>Core:<ul> <li>animation</li> <li>animationTesting</li> </ul> </li> <li>Security:<ul> <li>cryptoKtx</li> <li>identityCredential</li> </ul> </li> <li>Compose:<ul> <li>Runtime:</li> <li>dispatch</li> <li>savedInstance</li> <li>liveData</li> <li>rxJava2</li> <li>Animation</li> <li>Ui</li> <li>Foundation</li> <li>Material</li> </ul> </li> <li>Media2:<ul> <li>lifecycle</li> </ul> </li> <li>Concurrent:<ul> <li>futuresKtx</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#dependency-notations-renamed","title":"Dependency notations renamed","text":"<p>Several dependencies notations have been renamed in this release (compared to version 0.9.4).</p> <p>If you were using one of the following, you\u2019ll need to migrate these usages.</p> <p>We recommend to use \u201cReplace in Path\u201d in IntelliJ or Android Studio, filtering for the <code>*.gradle.kts</code> or <code>*.gradle</code> file extensions to do these replacements with ease.</p> <p>Note that for future versions, refreshVersions will be able to do this automatically.</p> <p>Here\u2019s the list of renamed dependency notations:</p> <ul> <li><code>AndroidX.coreKtx</code> -&gt; <code>AndroidX.core.ktx</code></li> <li><code>AndroidX.coreRole</code> -&gt; <code>AndroidX.core.role</code></li> <li><code>Square.retrofit2.adapter.retrofitJava8</code> -&gt; <code>Square.retrofit2.adapter.java8</code></li> <li><code>Square.retrofit2.adapter.retrofitRxJava1</code> -&gt; <code>Square.retrofit2.adapter.rxJava1</code></li> <li><code>Square.retrofit2.adapter.retrofitRxJava2</code> -&gt; <code>Square.retrofit2.adapter.rxJava2</code></li> <li><code>Testing.junit.junitJupiter</code> -&gt; <code>Testing.junit</code></li> <li><code>Testing.mockK.mockK</code> -&gt; <code>Testing.mockK</code></li> </ul>"},{"location":"CHANGELOG/#changes_1","title":"Changes","text":"<ul> <li>Make the <code>refreshVersions</code> task cancellable during network requests.</li> <li>Now, only http 404 and 401 responses from repositories will be silent.</li> <li>Server errors (i.e. all but http 404 and 401 responses) are now reported.</li> <li>Network failures are now reported.</li> <li>There is now a connection timeout (10 seconds per request for now)</li> <li>An error is reported if a dependency wasn\u2019t found in any of the configured repositories.</li> <li>All the searched repositories are now listed if a dependency wasn\u2019t found in any of them.</li> <li>Only declared repositories are now looked up. (Before, refreshVersions would search all dependencies in all repositories of all modules and their buildscript, regardless of which module was declaring them.)</li> <li>Dependency notation in <code>Ktor</code> no longer uses the <code>native</code> suffixed artifacts (because Kotlin 1.4 drops them, as the main ones become multiplatform)</li> </ul>"},{"location":"CHANGELOG/#fixes_10","title":"Fixes","text":"<ul> <li>Version sorting would crash if a version had a long number in it. This has now been fixed, any length of digit sequence is now supported in versions.</li> <li>Fix maven coordinates of several dependency notations</li> <li>Don\u2019t crash on repositories that are not https or file or have non password credentials.</li> <li>The <code>AndroidX.test.ext.jankTestHelper</code> notation and few other ones in <code>Firebase.mlKit</code> had wrong maven coordinates. This has been fixed, and tests have been added to prevent it from happening again on any dependency notation we provide.</li> </ul>"},{"location":"CHANGELOG/#previous-releases","title":"Previous releases","text":"<p>Change log</p>"},{"location":"add-dependencies/","title":"Add dependencies","text":""},{"location":"add-dependencies/#use-built-in-dependency-notations","title":"Use built-in dependency notations","text":"<p>See Built-in Dependency Notations</p> <p></p> <p>refreshVersions provides read-to-use organized dependency notations for select popular libraries of the following ecosystems:</p> <ul> <li>Kotlin Multiplatform</li> <li>Kotlin/JVM</li> <li>Android</li> </ul> <p>That doesn\u2019t prevent you from using refreshVersions in a Gradle project that is not using Kotlin or is not an Android project.</p> <p>You can use them in any <code>build.gradle</code> or <code>build.gradle.kts</code> file.</p> <p>Here\u2019s an example of how it looks like in the IDE:</p> <p>No imports needed.</p> <p></p> <p>Autocomplete in IDE for easy discoverability.</p> <p></p> <p>You can see all the dependency objects in this directory.</p>"},{"location":"add-dependencies/#wait-what-version-are-those-dependencies-using","title":"Wait, what version are those dependencies using?","text":"<p>All these dependency notations specify their version as the version placeholder (<code>_</code>), so refreshVersions can replace them seamlessly with the corresponding value defined in the <code>versions.properties</code> file, via Gradle APIs. The same will work for your own, non-built-in dependencies if you use that same version placeholder.</p> <p>After adding a dependency that doesn\u2019t have its version specified in the <code>versions.properties</code> file yet, refreshVersions will edit it and put the most stable recent version in it on the next Gradle sync (or any other Gradle run).</p> <p>It will also put any less stable versions as comments, allowing you to quickly upgrade if needed.</p>"},{"location":"add-dependencies/#add-gradle-plugins","title":"Add Gradle plugins","text":"<p>This section doesn\u2019t apply to plugins that are configured in a <code>buildscript</code> block (since these have their versions configured like regular dependencies), but only to those that are configured solely with a plugin id.</p> <p>To add such a plugin, do as usual, but do not specify the version in the <code>build.gradle</code> or <code>build.gradle.kts</code> file. Instead, set it up like so in the <code>versions.properties</code> file:</p> versions.properties <pre><code>plugin.com.apollographql.apollo=2.4.1\n\nplugin.com.squareup.sqldelight=1.4.3\n</code></pre> <p>Then you can omit the plugin version in all <code>build.gradle(.kts)</code> of your project:</p> some-module/build.gradle.kts <pre><code>plugins {\n    id(\"com.squareup.sqldelight\")\n    id(\"com.apollographql.apollo\")\n}\n</code></pre> some-module/build.gradle <pre><code>plugins {\n    id 'com.squareup.sqldelight'\n    id 'com.apollographql.apollo'\n}\n</code></pre> <p>As you see, the convention is pretty simple. The key is the id of the plugin, prefixed by <code>plugin.</code>: <code>plugin.some.plugin.id</code> sets the version of the plugin of id <code>some.plugin.id</code>.</p>"},{"location":"add-dependencies/#get-the-version-from-anywhere","title":"Get the version from anywhere","text":"<p>In some cases, you might need to get the version defined in the <code>versions.properties</code> file in a Gradle script. For these cases, there\u2019s the <code>versionFor</code> function that takes either a version key, or a full dependency notation.</p> <p>Here\u2019s a usage example with Jetpack Compose in an Android project:</p> build.gradle.ktsbuild.gradle <pre><code>import de.fayard.refreshVersions.core.versionFor\n\n...\n\ncomposeOptions {\n    kotlinCompilerExtensionVersion = versionFor(AndroidX.compose.ui)\n}\n</code></pre> <pre><code>import static de.fayard.refreshVersions.core.Versions.versionFor\n\n...\n\ncomposeOptions {\n    kotlinCompilerExtensionVersion = versionFor(project, AndroidX.compose.ui)\n}\n</code></pre> <p>Using <code>versionFor(\"version.androidx.compose.ui\")</code> would also work, so long as <code>version.androidx.compose.ui</code> is defined in the <code>versions.properties</code> file.</p>"},{"location":"add-dependencies/#non-built-in-dependency-notations","title":"Non-built-in dependency notations","text":"<p>Generally speaking, so long as you have the version placeholder (<code>_</code>) in place of the version, refreshVersions will handle it.</p> <p>Below are some ways to deal with the dependency notations that are not built-in.</p>"},{"location":"add-dependencies/#using-buildsrclibs","title":"Using buildSrcLibs","text":"<p>The Gradle task <code>buildSrcLibs</code> can be used to automatically generate a <code>Libs.kt</code> file in the buildSrc, that will contain all the dependency notations curently used in your build.</p> <p>To use it, you need to enable it:</p> settings.gradle.ktssettings.gradle <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id(\"de.fayard.refreshVersions\") version \"0.60.6\"\n}\n\nrefreshVersions {\n    enableBuildSrcLibs() // &lt;-- Add this\n}\n</code></pre> <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id 'de.fayard.refreshVersions' version '0.60.6'\n}\n\nrefreshVersions {\n    enableBuildSrcLibs() // &lt;-- Add this\n}\n</code></pre> <p>Then you can use the command <code>./gradlew buildSrcLibs</code> to generate accessors for your dependencies</p> <pre><code>$ ./gradlew buildSrcLibs\n&gt; Task :buildSrcLibs\n        new file:   buildSrc/build.gradle.kts\n        new file:   buildSrc/src/main/kotlin/Libs.kt\n</code></pre> <p>The generated file will look like this:</p> buildSrc/src/main/kotlin/Libs.kt <pre><code>/**\n * Generated by `$ ./gradlew buildSrcLibs`\n */\nobject Libs {\n\n    const val guava: String = \"com.google.guava:guava:_\"\n\n    const val guice: String = \"com.google.inject:guice:_\"\n\n}\n</code></pre> <p>Because this file uses the version placeholder (<code>_</code>), it is compatible with refreshVersions!</p> <p>Read more: gradle buildSrcVersions.</p>"},{"location":"add-dependencies/#using-package-search-from-jetbrains","title":"Using Package Search from JetBrains","text":"<p>JetBrains offers the plugin Package Search, it is compatible with both IntelliJ IDEA and Android Studio. It also has a website</p> <p>Package Search provides a nice UX to add a dependency:</p> <p></p> <p>Can you use it with refreshVersions?</p> <p>Sure, just use the version placeholder (<code>_</code>).</p>"},{"location":"add-dependencies/#using-gradle-versions-catalogs","title":"Using Gradle Versions Catalogs","text":"<p>Gradle 7+ comes with its own feature for centralizing dependencies: Versions Catalogs.</p> <p>With Versions Catalog, you have a file like <code>gradle/libs.versions.toml</code> where you can centralize all your dependencies and benefit from typesafe accessors in your <code>build.gradle[.kts]</code> file.</p> <p>We support updating this version catalog. If you want to keep versions in the <code>versions.properties</code> file, you can use the version placeholder (<code>_</code>).</p>"},{"location":"add-dependencies/#using-the-librariesgradle-pattern","title":"Using the libraries.gradle pattern","text":"<p>An older approach to centralize dependencies is to have a <code>libraries.gradle</code> file:</p> libraries.gradle <pre><code>ext.libraries = [ // Groovy map literal\n    spring_core: \"org.springframework:spring-core:3.1\",\n    junit: \"junit:junit:4.10\"\n]\n</code></pre> some-module/build.gradle <pre><code>apply(from = \"../libraries.gradle\")\n\ndependencies {\n    compile libraries.spring_core\n    testCompile libraries.junit\n}\n</code></pre> <p>Does that work with refreshVersions too? Yes, just use the version placeholder (<code>_</code>):</p> libraries.gradle <pre><code>ext.libraries = [ // Groovy map literal\n-    spring_core: \"org.springframework:spring-core:3.1\",\n+    spring_core: \"org.springframework:spring-core:_\",\n-    junit: \"junit:junit:4.10\"\n+    junit: \"junit:junit:_\"\n]\n</code></pre>"},{"location":"dependency-notations/","title":"Built-in Dependency Notations","text":"<p>refreshVersions provides 1257 Dependency Notations in 26 groups and 264 subgroups</p> <p>Built-in Dependency Notations are maven coordinates of popular libraries, discoverable as for example <code>KotlinX.coroutines.core</code> in IntelliJ IDEA, who will be configured in the <code>versions.properties</code> file with the latest available version after the first Gradle sync. They drastically cut the time it takes to add popular libraries to your Gradle build.</p> <p>See: Adding a Dependency Notation</p> <p>Below is the list of all available dependency notations.</p> <p>Use the table of contents to jump to the group you are interested in.</p> <p>Hover \ud83d\udc01 on a dependency notation to see its <code>Triple(KotlinName, MavenCoordinate, VersionKey)</code>.</p>"},{"location":"dependency-notations/#androidkt","title":"Android.kt","text":"Group Dependency Notations Android              billingClient                  -                       installReferrer          Android.billingClient              ktx          Android.tools              desugarJdkLibs                  -                       r8          Android.tools.build              gradlePlugin"},{"location":"dependency-notations/#androidxkt","title":"AndroidX.kt","text":"Group Dependency Notations AndroidX              activity                  -                       annotation                  -                       appCompat                  -                       appSearch                  -                       asyncLayoutInflater                  -                       autoFill                  -                       biometric                  -                       bluetooth                  -                       browser                  -                       carApp                  -                       cardView                  -                       collection                  -                       constraintLayout                  -                       contentPager                  -                       coordinatorLayout                  -                       core                  -                       credentials                  -                       cursorAdapter                  -                       customView                  -                       dataStore                  -                       documentFile                  -                       dragAndDrop                  -                       drawerLayout                  -                       dynamicAnimation                  -                       emoji                  -                       emoji2                  -                       exifInterface                  -                       fragment                  -                       glance                  -                       gridLayout                  -                       heifWriter                  -                       interpolator                  -                       javascriptEngine                  -                       leanback                  -                       loader                  -                       localBroadcastManager                  -                       media                  -                       mediaRouter                  -                       multidex                  -                       palette                  -                       preference                  -                       print                  -                       recommendation                  -                       recyclerView                  -                       remoteCallback                  -                       savedState                  -                       shareTarget                  -                       slidingPaneLayout                  -                       sqlite                  -                       swipeRefreshLayout                  -                       textClassifier                  -                       tracing                  -                       transitionKtx                  -                       transition                  -                       tvProvider                  -                       vectorDrawable                  -                       versionedParcelable                  -                       viewPager                  -                       viewPager2                  -                       wear                  -                       webkit                  -                       window          AndroidX.activity              compose                  -                       ktx          AndroidX.annotation              experimental          AndroidX.appCompat              resources          AndroidX.appSearch              builtInTypes                  -                       compiler                  -                       debugView                  -                       ktx                  -                       localStorage                  -                       platformStorage          AndroidX.archCore              common                  -                       runtime                  -                       testing          AndroidX.asyncLayoutInflater              appcompat          AndroidX.benchmark              baselineProfileGradlePlugin                  -                       common                  -                       gradlePlugin                  -                       junit4                  -                       macroJunit4                  -                       macro          AndroidX.biometric              ktx          AndroidX.bluetooth              testing          AndroidX.camera              camera2                  -                       core                  -                       extensions                  -                       lifecycle                  -                       mlKitVision                  -                       video                  -                       view                  -                       viewFinder          AndroidX.carApp              automotive                  -                       projected                  -                       testing          AndroidX.collection              ktx          AndroidX.compose              bom                  -                       animation                  -                       compiler                  -                       foundation                  -                       material                  -                       material3                  -                       runtime                  -                       ui          AndroidX.compose.animation              core                  -                       graphics          AndroidX.compose.foundation              layout          AndroidX.compose.material              ripple          AndroidX.compose.material.icons              core                  -                       extended          AndroidX.compose.material3              windowSizeClass          AndroidX.compose.runtime              dispatch                  -                       liveData                  -                       rxJava2                  -                       rxJava3                  -                       saveable                  -                       tracing          AndroidX.compose.ui              geometry                  -                       graphics                  -                       testJunit4                  -                       testManifest                  -                       test                  -                       text                  -                       toolingData                  -                       toolingPreview                  -                       tooling                  -                       unit                  -                       util                  -                       viewBinding          AndroidX.compose.ui.text              googleFonts          AndroidX.concurrent              futuresKtx                  -                       futures          AndroidX.constraintLayout              compose          AndroidX.core              animationTesting                  -                       animation                  -                       googleShortcuts                  -                       i18n                  -                       ktx                  -                       locationAltitude                  -                       performance                  -                       remoteViews                  -                       role                  -                       splashscreen                  -                       telecom                  -                       testing                  -                       uwb          AndroidX.core.performance              playServices                  -                       testing          AndroidX.core.uwb              rxJava3          AndroidX.credentials              playServicesAuth          AndroidX.customView              poolingContainer          AndroidX.dataStore              core                  -                       preferences                  -                       rxJava2                  -                       rxJava3          AndroidX.dataStore.core              okio          AndroidX.dataStore.preferences              core                  -                       rxJava2                  -                       rxJava3          AndroidX.dynamicAnimation              ktx          AndroidX.emoji              appCompat                  -                       bundled          AndroidX.emoji2              bundled                  -                       picker                  -                       viewsHelper                  -                       views          AndroidX.enterprise              feedbackTesting                  -                       feedback          AndroidX.fragment              ktx                  -                       testing          AndroidX.games              activity                  -                       controller                  -                       framePacing                  -                       performanceTuner                  -                       textInput          AndroidX.glance              appWidget                  -                       material3                  -                       material                  -                       wearTiles          AndroidX.graphics              core                  -                       path                  -                       shapes          AndroidX.health              servicesClient          AndroidX.health.connect              client          AndroidX.hilt              compiler                  -                       navigationCompose                  -                       navigationFragment                  -                       work          AndroidX.input              motionPrediction          AndroidX.leanback              grid                  -                       paging                  -                       preference                  -                       tab          AndroidX.lifecycle              commonJava8                  -                       common                  -                       compiler                  -                       extensions                  -                       liveDataKtx                  -                       liveData                  -                       process                  -                       reactiveStreamsKtx                  -                       reactiveStreams                  -                       runtime                  -                       service                  -                       viewModelCompose                  -                       viewModelKtx                  -                       viewModelSavedState                  -                       viewModel          AndroidX.lifecycle.runtime              compose                  -                       ktx                  -                       testing          AndroidX.media2              common                  -                       exoplayer                  -                       player                  -                       session                  -                       widget          AndroidX.media3              cast                  -                       common                  -                       container                  -                       database                  -                       dataSource                  -                       decoder                  -                       effect                  -                       exoPlayer                  -                       extractor                  -                       muxer                  -                       session                  -                       testUtils                  -                       transformer                  -                       ui          AndroidX.media3.dataSource              cronet                  -                       okhttp                  -                       rtmp          AndroidX.media3.exoPlayer              dash                  -                       hls                  -                       ima                  -                       rtsp                  -                       workmanager          AndroidX.media3.testUtils              robolectric          AndroidX.media3.ui              leanback          AndroidX.mediaRouter              testing          AndroidX.metrics              performance          AndroidX.multidex              instrumentation          AndroidX.navigation              commonKtx                  -                       common                  -                       compose                  -                       dynamicFeaturesFragment                  -                       fragmentKtx                  -                       fragment                  -                       runtimeKtx                  -                       runtime                  -                       safeArgsGenerator                  -                       safeArgsGradlePlugin                  -                       testing                  -                       uiKtx                  -                       ui          AndroidX.paging              commonKtx                  -                       common                  -                       compose                  -                       guava                  -                       runtimeKtx                  -                       runtime                  -                       rxJava2Ktx                  -                       rxJava2                  -                       rxJava3                  -                       testing          AndroidX.palette              ktx          AndroidX.preference              ktx          AndroidX.privacySandbox              tools          AndroidX.privacySandbox.plugins              library          AndroidX.privacySandbox.sdkRuntime              client                  -                       core          AndroidX.privacySandbox.tools              apiCompiler                  -                       apiGenerator                  -                       apiPackager                  -                       core          AndroidX.privacySandbox.ui              client                  -                       core                  -                       provider          AndroidX.recyclerView              selection          AndroidX.remoteCallback              processor          AndroidX.room              common                  -                       compiler                  -                       gradlePlugin                  -                       guava                  -                       ktx                  -                       paging                  -                       runtime                  -                       rxJava2                  -                       rxJava3                  -                       testing          AndroidX.room.paging              guava                  -                       rxJava2                  -                       rxJava3          AndroidX.savedState              ktx          AndroidX.security              appAuthenticatorTesting                  -                       appAuthenticator                  -                       cryptoKtx                  -                       crypto                  -                       identityCredential          AndroidX.slice              buildersKtx                  -                       builders                  -                       core                  -                       view          AndroidX.sqlite              framework                  -                       ktx          AndroidX.startup              runtime          AndroidX.test              coreKtx                  -                       core                  -                       monitor                  -                       orchestrator                  -                       rules                  -                       runner                  -                       services                  -                       uiAutomator          AndroidX.test.espresso              accessibility                  -                       contrib                  -                       core                  -                       device                  -                       idlingResource                  -                       intents                  -                       remote                  -                       web          AndroidX.test.espresso.idling              concurrent                  -                       net          AndroidX.test.ext              junit                  -                       truth          AndroidX.test.ext.junit              gTest                  -                       ktx          AndroidX.tracing              ktx                  -                       perfetto          AndroidX.tracing.perfetto              handshake          AndroidX.tv              foundation                  -                       material          AndroidX.vectorDrawable              animated                  -                       seekable          AndroidX.wear              inputTesting                  -                       input                  -                       ongoing                  -                       phoneInteractions                  -                       remoteInteractions                  -                       protoLayout                  -                       tiles                  -                       watchFace          AndroidX.wear.compose              foundation                  -                       material3                  -                       material                  -                       navigation                  -                       uiTooling          AndroidX.wear.protoLayout              expression                  -                       material                  -                       renderer          AndroidX.wear.tiles              material                  -                       renderer                  -                       testing          AndroidX.wear.watchFace              editor          AndroidX.wear.watchFace.complications              dataSourceKtx                  -                       dataSource                  -                       data                  -                       rendering          AndroidX.window              java                  -                       rxJava2                  -                       rxJava3                  -                       testing          AndroidX.window.extensions              core          AndroidX.work              gcm                  -                       multiprocess                  -                       runtimeKtx                  -                       runtime                  -                       rxJava2                  -                       rxJava3                  -                       testing"},{"location":"dependency-notations/#apollographqlkt","title":"ApolloGraphQL.kt","text":"Group Dependency Notations ApolloGraphQL              adapters                  -                       api                  -                       ast                  -                       httpCache                  -                       idlingResource                  -                       mockserver                  -                       normalizedCacheSqlite                  -                       normalizedCache                  -                       runtime                  -                       testingSupport"},{"location":"dependency-notations/#arrowkt","title":"Arrow.kt","text":"Group Dependency Notations Arrow              core                  -                       optics                  -                       stack          Arrow.analysis              gradlePlugin          Arrow.fx              coroutines                  -                       stm          Arrow.optics              kspPlugin                  -                       reflect"},{"location":"dependency-notations/#coilkt","title":"COIL.kt","text":"Group Dependency Notations COIL              base                  -                       composeBase                  -                       compose                  -                       gif                  -                       svg                  -                       video                  -                       COIL"},{"location":"dependency-notations/#cashappkt","title":"CashApp.kt","text":"Group Dependency Notations CashApp              licenseeGradlePlugin                  -                       turbine          CashApp.copper              flow                  -                       rx2                  -                       rx3          CashApp.molecule              gradlePlugin                  -                       runtime          CashApp.sqlDelight              gradlePlugin          CashApp.sqlDelight.dialects              hSql                  -                       mySql                  -                       postgreSql          CashApp.sqlDelight.drivers              android                  -                       jdbc                  -                       native                  -                       jdbcSqlite                  -                       sqlJs                  -                       webWorker          CashApp.sqlDelight.extensions              androidPaging3                  -                       coroutines                  -                       rxJava2                  -                       rxJava3"},{"location":"dependency-notations/#chuckerkt","title":"Chucker.kt","text":"Group Dependency Notations Chucker              libraryNoOp                  -                       library"},{"location":"dependency-notations/#firebasekt","title":"Firebase.kt","text":"Group Dependency Notations Firebase              analyticsKtx                  -                       analytics                  -                       appDistributionGradlePlugin                  -                       appIndexing                  -                       authenticationKtx                  -                       authentication                  -                       bom                  -                       remoteConfigKtx                  -                       remoteConfig                  -                       crashlyticsGradlePlugin                  -                       crashlyticsKtx                  -                       crashlyticsNdk                  -                       crashlytics                  -                       realtimeDatabaseKtx                  -                       realtimeDatabase                  -                       dynamicLinksKtx                  -                       dynamicLinks                  -                       dynamicModuleSupport                  -                       cloudFirestoreKtx                  -                       cloudFirestore                  -                       cloudFunctionsKtx                  -                       cloudFunctions                  -                       inAppMessagingDisplayKtx                  -                       inAppMessagingDisplay                  -                       inAppMessagingKtx                  -                       inAppMessaging                  -                       cloudMessagingDirectBoot                  -                       cloudMessagingKtx                  -                       cloudMessaging                  -                       mlModelDownloaderKtx                  -                       mlModelDownloader                  -                       performanceMonitoringKtx                  -                       performanceMonitoring                  -                       cloudStorageKtx                  -                       cloudStorage                  -                       performanceMonitoringGradlePlugin"},{"location":"dependency-notations/#googlekt","title":"Google.kt","text":"Group Dependency Notations Google              dagger                  -                       playServicesGradlePlugin                  -                       oboe          Google.accompanist              adaptive                  -                       drawablePainter                  -                       navigationMaterial                  -                       permissions                  -                       testHarness          Google.ambient              crossDevice          Google.android              flexbox                  -                       openSourceLicensesPlugin                  -                       versionMatcherPlugin                  -                       material                  -                       supportWearable                  -                       wearable                  -                       browserHelper          Google.android.fhir              dataCapture                  -                       engine                  -                       workflow          Google.android.maps              places                  -                       utils                  -                       compose                  -                       ktx                  -                       rx          Google.android.maps.places              ktx                  -                       rx          Google.android.maps.utils              ktx          Google.android.material              composeThemeAdapter3                  -                       composeThemeAdapter          Google.android.play              appUpdateKtx                  -                       appUpdate                  -                       assetDeliveryKtx                  -                       assetDelivery                  -                       featureDeliveryKtx                  -                       featureDelivery                  -                       reviewKtx                  -                       review          Google.android.playServices              analytics                  -                       appSet                  -                       auth                  -                       awareness                  -                       base                  -                       basement                  -                       cast                  -                       cronet                  -                       drive                  -                       deviceToDeviceInteractions                  -                       fido                  -                       fitness                  -                       gamesV2                  -                       games                  -                       gcm                  -                       matter                  -                       identity                  -                       instantApps                  -                       location                  -                       maps                  -                       nearby                  -                       openSourceLicenses                  -                       panorama                  -                       passwordComplexity                  -                       pay                  -                       reCaptcha                  -                       safetyNet                  -                       tagManager                  -                       tasks                  -                       threadNetwork                  -                       vision                  -                       wallet                  -                       wearOS          Google.android.playServices.auth              apiPhone                  -                       blockStore          Google.android.playServices.cast              framework                  -                       tv          Google.android.playServices.gamesV2              nativeC          Google.android.playServices.mlKit.naturalLanguage              languageIdentification                  -                       smartReply          Google.android.playServices.mlKit.vision              barcodeScanning                  -                       faceDetection                  -                       imageLabeling                  -                       textRecognition          Google.android.playServices.mlKit.vision.barcodeScanning              codeScanner          Google.android.playServices.mlKit.vision.imageLabeling              custom          Google.android.playServices.mlKit.vision.textRecognition              chinese                  -                       devanagari                  -                       japanese                  -                       korean          Google.android.playServices.tfLite              accelerationService                  -                       gpu                  -                       java                  -                       support          Google.ar              core          Google.ar.sceneform              animation                  -                       assets                  -                       core                  -                       filamentAndroid                  -                       plugin                  -                       rendering                  -                       sceneformBase                  -                       ux          Google.dagger              android                  -                       compiler                  -                       gwt                  -                       producers                  -                       spi          Google.dagger.android              processor                  -                       support          Google.dagger.grpc              server          Google.dagger.grpc.server              annotations                  -                       processor          Google.dagger.hilt              android                  -                       compiler          Google.dagger.hilt.android              compiler                  -                       gradlePlugin                  -                       testing          Google.firebase              analyticsKtx                  -                       analytics                  -                       appDistributionGradlePlugin                  -                       appIndexing                  -                       authenticationKtx                  -                       authentication                  -                       bom                  -                       remoteConfigKtx                  -                       remoteConfig                  -                       crashlyticsGradlePlugin                  -                       crashlyticsKtx                  -                       crashlyticsNdk                  -                       crashlytics                  -                       realtimeDatabaseKtx                  -                       realtimeDatabase                  -                       dynamicLinksKtx                  -                       dynamicLinks                  -                       dynamicModuleSupport                  -                       cloudFirestoreKtx                  -                       cloudFirestore                  -                       cloudFunctionsKtx                  -                       cloudFunctions                  -                       inAppMessagingDisplayKtx                  -                       inAppMessagingDisplay                  -                       inAppMessagingKtx                  -                       inAppMessaging                  -                       cloudMessagingDirectBoot                  -                       cloudMessagingKtx                  -                       cloudMessaging                  -                       mlModelDownloaderKtx                  -                       mlModelDownloader                  -                       performanceMonitoringKtx                  -                       performanceMonitoring                  -                       cloudStorageKtx                  -                       cloudStorage                  -                       performanceMonitoringGradlePlugin          Google.horologist              annotations                  -                       audio                  -                       composables                  -                       dataLayer                  -                       healthComposables                  -                       media                  -                       networkAwareness                  -                       tiles          Google.horologist.audio              ui          Google.horologist.auth              composables                  -                       data                  -                       ui          Google.horologist.auth.data              phone                  -                       watchOAuth          Google.horologist.compose              layout                  -                       material                  -                       tools          Google.horologist.dataLayer              grpc                  -                       phone                  -                       watch          Google.horologist.media              data                  -                       ui          Google.horologist.media3              audioOffload                  -                       backend                  -                       logging                  -                       outputSwitcher          Google.horologist.networkAwareness              db                  -                       okHttp                  -                       ui          Google.mlKit              playStoreDynamicFeatureSupport          Google.mlKit.naturalLanguage              entityExtraction                  -                       languageIdentification                  -                       smartReply                  -                       translate          Google.mlKit.vision              barcodeScanning                  -                       digitalInkRecognition                  -                       entityExtraction                  -                       faceDetection                  -                       faceMeshDetection                  -                       imageLabeling                  -                       linkFirebase                  -                       objectDetection                  -                       poseDetection                  -                       selfieSegmentation                  -                       textRecognition          Google.mlKit.vision.imageLabeling              custom          Google.mlKit.vision.objectDetection              custom          Google.mlKit.vision.poseDetection              accurate          Google.mlKit.vision.textRecognition              chinese                  -                       devanagari                  -                       japanese                  -                       korean          Google.modernStorage              bom                  -                       permissions                  -                       photoPicker                  -                       storage"},{"location":"dependency-notations/#http4kkt","title":"Http4k.kt","text":"Group Dependency Notations Http4k              aws                  -                       bom                  -                       cloudnative                  -                       contract                  -                       core                  -                       graphql                  -                       incubator                  -                       jsonrpc                  -                       metricsMicrometer                  -                       multipart                  -                       opentelemetry                  -                       realtimeCore                  -                       resilience4j                  -                       securityOauth          Http4k.client              apacheAsync                  -                       apache4Async                  -                       apache4                  -                       apache                  -                       jetty                  -                       okhttp                  -                       websocket          Http4k.format              argo                  -                       core                  -                       gson                  -                       jacksonXml                  -                       jacksonYaml                  -                       jackson                  -                       klaxon                  -                       kotlinxSerialization                  -                       moshi                  -                       xml          Http4k.server              apache4                  -                       apache                  -                       jetty                  -                       ktorcio                  -                       ktornetty                  -                       netty                  -                       ratpack                  -                       undertow          Http4k.serverless              alibaba                  -                       azure                  -                       gcf                  -                       lambdaRuntime                  -                       lambda                  -                       openwhisk                  -                       tencent          Http4k.template              core                  -                       dust                  -                       freemarker                  -                       handlebars                  -                       jade4j                  -                       pebble                  -                       thymeleaf          Http4k.testing              approval                  -                       chaos                  -                       hamkrest                  -                       kotest                  -                       servirtium                  -                       strikt                  -                       webdriver"},{"location":"dependency-notations/#jakewhartonkt","title":"JakeWharton.kt","text":"Group Dependency Notations JakeWharton              confundusGradlePlugin                  -                       picnic                  -                       rxBinding3                  -                       rxBinding4                  -                       rxRelay2                  -                       rxRelay3                  -                       timber                  -                       wormholeGradlePlugin          JakeWharton.moshi              shimo          JakeWharton.retrofit2.converter              kotlinxSerialization          JakeWharton.rxBinding3              appcompat                  -                       core                  -                       drawerLayout                  -                       leanback                  -                       material                  -                       recyclerview                  -                       slidingPaneLayout                  -                       swipeRefreshLayout                  -                       viewPager2                  -                       viewPager          JakeWharton.rxBinding4              appcompat                  -                       core                  -                       drawerLayout                  -                       leanback                  -                       material                  -                       recyclerview                  -                       slidingPaneLayout                  -                       swipeRefreshLayout                  -                       viewPager2                  -                       viewPager"},{"location":"dependency-notations/#jetbrainskt","title":"JetBrains.kt","text":"Group Dependency Notations JetBrains.exposed              core                  -                       dao                  -                       jdbc          JetBrains.ktor              server                  -                       testDispatcher                  -                       utils          JetBrains.ktor.client              android                  -                       apache                  -                       auth                  -                       cio                  -                       contentNegotiationTests                  -                       contentNegotiation                  -                       core                  -                       curl                  -                       darwin                  -                       encoding                  -                       gson                  -                       jackson                  -                       java                  -                       jetty                  -                       jsonTests                  -                       json                  -                       logging                  -                       mock                  -                       okHttp                  -                       resources                  -                       serialization                  -                       tests          JetBrains.ktor.plugins              events                  -                       http                  -                       io                  -                       networkTlsCertificates                  -                       networkTls                  -                       network                  -                       resources                  -                       serialization                  -                       websocketSerialization                  -                       websockets          JetBrains.ktor.plugins.http              cio          JetBrains.ktor.plugins.serialization              gson                  -                       jackson                  -                       kotlinx          JetBrains.ktor.plugins.serialization.kotlinx              cbor                  -                       json                  -                       tests                  -                       xml          JetBrains.ktor.server              auth                  -                       autoHeadResponse                  -                       cachingHeaders                  -                       callId                  -                       callLogging                  -                       cio                  -                       compression                  -                       conditionalHeaders                  -                       contentNegotiation                  -                       core                  -                       cors                  -                       dataConversion                  -                       defaultHeaders                  -                       doubleReceive                  -                       forwardedHeader                  -                       freeMarker                  -                       hostCommon                  -                       hsts                  -                       htmlBuilder                  -                       httpRedirect                  -                       jetty                  -                       jte                  -                       locations                  -                       methodOverride                  -                       metricsMicrometer                  -                       metrics                  -                       mustache                  -                       netty                  -                       partialContent                  -                       pebble                  -                       resources                  -                       servlet                  -                       sessions                  -                       statusPages                  -                       testHost                  -                       testSuites                  -                       thymeleaf                  -                       tomcat                  -                       velocity                  -                       webjars                  -                       websockets          JetBrains.ktor.server.auth              jwt                  -                       ldap"},{"location":"dependency-notations/#kodeinkt","title":"Kodein.kt","text":"Group Dependency Notations Kodein.di              configurableJS                  -                       configurableJvm                  -                       androidCore                  -                       androidSupport                  -                       androidx                  -                       ktor                  -                       tornadofx                  -                       js                  -                       jsr330"},{"location":"dependency-notations/#koinkt","title":"Koin.kt","text":"Group Dependency Notations Koin              androidCompat                  -                       android                  -                       compose                  -                       navigation                  -                       workManager                  -                       core                  -                       ktor                  -                       slf4j                  -                       junit4                  -                       junit5                  -                       test"},{"location":"dependency-notations/#kotlinkt","title":"Kotlin.kt","text":"Group Dependency Notations Kotlin              gradlePlugin                  -                       scriptRuntime                  -                       stdlib                  -                       test          Kotlin.stdlib              common                  -                       jdk7                  -                       jdk8                  -                       js          Kotlin.test              annotationsCommon                  -                       common                  -                       jsRunner                  -                       js                  -                       junit5                  -                       junit                  -                       testng"},{"location":"dependency-notations/#kotlinxkt","title":"KotlinX.kt","text":"Group Dependency Notations KotlinX              dataframe                  -                       cli                  -                       datetime                  -                       html                  -                       nodeJs                  -                       lincheck          KotlinX.collections              immutableJvmOnly                  -                       immutable          KotlinX.coroutines              android                  -                       bom                  -                       core                  -                       debug                  -                       guava                  -                       javaFx                  -                       jdk8                  -                       jdk9                  -                       playServices                  -                       reactive                  -                       reactor                  -                       rx2                  -                       rx3                  -                       slf4j                  -                       swing                  -                       test          KotlinX.dataframe              arrow                  -                       core                  -                       excel                  -                       dataframe          KotlinX.deeplearning              api                  -                       onnx                  -                       visualization          KotlinX.io              jvm          KotlinX.lincheck              jvm          KotlinX.multik              api                  -                       default                  -                       jvm                  -                       native          KotlinX.reflect              lite          KotlinX.serialization              bom                  -                       cbor                  -                       core                  -                       hocon                  -                       json                  -                       properties                  -                       protobuf          KotlinX.serialization.json              okio"},{"location":"dependency-notations/#ktorkt","title":"Ktor.kt","text":"Group Dependency Notations Ktor              server                  -                       testDispatcher                  -                       utils          Ktor.client              android                  -                       apache                  -                       auth                  -                       cio                  -                       contentNegotiationTests                  -                       contentNegotiation                  -                       core                  -                       curl                  -                       darwin                  -                       encoding                  -                       gson                  -                       jackson                  -                       java                  -                       jetty                  -                       jsonTests                  -                       json                  -                       logging                  -                       mock                  -                       okHttp                  -                       resources                  -                       serialization                  -                       tests          Ktor.plugins              events                  -                       http                  -                       io                  -                       networkTlsCertificates                  -                       networkTls                  -                       network                  -                       resources                  -                       serialization                  -                       websocketSerialization                  -                       websockets          Ktor.plugins.http              cio          Ktor.plugins.serialization              gson                  -                       jackson                  -                       kotlinx          Ktor.plugins.serialization.kotlinx              cbor                  -                       json                  -                       tests                  -                       xml          Ktor.server              auth                  -                       autoHeadResponse                  -                       cachingHeaders                  -                       callId                  -                       callLogging                  -                       cio                  -                       compression                  -                       conditionalHeaders                  -                       contentNegotiation                  -                       core                  -                       cors                  -                       dataConversion                  -                       defaultHeaders                  -                       doubleReceive                  -                       forwardedHeader                  -                       freeMarker                  -                       hostCommon                  -                       hsts                  -                       htmlBuilder                  -                       httpRedirect                  -                       jetty                  -                       jte                  -                       locations                  -                       methodOverride                  -                       metricsMicrometer                  -                       metrics                  -                       mustache                  -                       netty                  -                       partialContent                  -                       pebble                  -                       resources                  -                       servlet                  -                       sessions                  -                       statusPages                  -                       testHost                  -                       testSuites                  -                       thymeleaf                  -                       tomcat                  -                       velocity                  -                       webjars                  -                       websockets          Ktor.server.auth              jwt                  -                       ldap"},{"location":"dependency-notations/#orchidkt","title":"Orchid.kt","text":"Group Dependency Notations Orchid              core                  -                       test          Orchid.bundles              all                  -                       blog                  -                       docs                  -                       languagePack          Orchid.plugins              asciidoc                  -                       azure                  -                       bible                  -                       bitbucket                  -                       changelog                  -                       diagrams                  -                       forms                  -                       github                  -                       gitlab                  -                       groovydoc                  -                       javadoc                  -                       kss                  -                       kotlindoc                  -                       netlify                  -                       netlifyCMS                  -                       pages                  -                       pluginDocs                  -                       posts                  -                       presentations                  -                       search                  -                       sourceDoc                  -                       swagger                  -                       swiftdoc                  -                       syntaxHighlighter                  -                       taxonomies                  -                       wiki                  -                       writersBlocks          Orchid.themes              bsDoc                  -                       copper                  -                       editorial                  -                       futureImperfect"},{"location":"dependency-notations/#reactivexkt","title":"ReactiveX.kt","text":"Group Dependency Notations ReactiveX              rxJava2                  -                       rxJava3          ReactiveX.rxJava2              rxAndroid                  -                       rxKotlin          ReactiveX.rxJava3              rxAndroid                  -                       rxKotlin"},{"location":"dependency-notations/#rickclephaskt","title":"RickClephas.kt","text":"Group Dependency Notations RickClephas.nativeCoroutines              annotations                  -                       compilerEmbeddable                  -                       compiler                  -                       core                  -                       gradlePlugin"},{"location":"dependency-notations/#russhwolfkt","title":"RussHWolf.kt","text":"Group Dependency Notations RussHWolf              multiplatformSettings          RussHWolf.multiplatformSettings              coroutinesNativeMt                  -                       coroutines                  -                       dataStore                  -                       noArg                  -                       serialization                  -                       test                  -                       settings"},{"location":"dependency-notations/#splittieskt","title":"Splitties.kt","text":"Group Dependency Notations Splitties              activities                  -                       alertdialogAppcompatCoroutines                  -                       alertdialogAppcompat                  -                       alertdialogMaterial                  -                       alertdialog                  -                       appctx                  -                       archLifecycle                  -                       archRoom                  -                       bitflags                  -                       bundle                  -                       checkedlazy                  -                       collections                  -                       coroutines                  -                       dimensions                  -                       exceptions                  -                       fragmentargs                  -                       fragments                  -                       initprovider                  -                       intents                  -                       lifecycleCoroutines                  -                       mainhandler                  -                       mainthread                  -                       materialColors                  -                       materialLists                  -                       permissions                  -                       preferences                  -                       resources                  -                       snackbar                  -                       stethoInit                  -                       systemservices                  -                       toast                  -                       typesaferecyclerview                  -                       viewsAppcompat                  -                       viewsCardview                  -                       viewsCoroutinesMaterial                  -                       viewsCoroutines                  -                       viewsDslAppcompat                  -                       viewsDslConstraintlayout                  -                       viewsDslCoordinatorlayout                  -                       viewsDslMaterial                  -                       viewsDslRecyclerview                  -                       viewsDsl                  -                       viewsMaterial                  -                       viewsRecyclerview                  -                       viewsSelectableAppcompat                  -                       viewsSelectableConstraintlayout                  -                       viewsSelectable                  -                       views          Splitties.pack              appCompatWithViewsDsl                  -                       appCompat                  -                       androidBaseWithViewsDsl                  -                       androidBase                  -                       androidMdcWithViewsDsl                  -                       androidMdc"},{"location":"dependency-notations/#springkt","title":"Spring.kt","text":"Group Dependency Notations Spring              rabbitTest                  -                       batchTest                  -                       geode                  -                       kafkaTest                  -                       kafka                  -                       springRestdocsWebtestclient          Spring.boms              dependencies                  -                       springCloud                  -                       geode          Spring.boot              configurationProcessor                  -                       devTools                  -                       activemq                  -                       actuator                  -                       amqp                  -                       artemis                  -                       batch                  -                       cache                  -                       freemarker                  -                       groovyTemplates                  -                       hateoas                  -                       integration                  -                       jdbc                  -                       jersey                  -                       jooq                  -                       mail                  -                       mustache                  -                       oauth2Client                  -                       oauth2ResourceServer                  -                       quartz                  -                       rsocket                  -                       security                  -                       test                  -                       thymeleaf                  -                       validation                  -                       webServices                  -                       web                  -                       webflux                  -                       websocket          Spring.boot.data              cassandraReactive                  -                       cassandra                  -                       couchbase_reactive                  -                       couchbase                  -                       elasticsearch                  -                       jdbc                  -                       jpa                  -                       ldap                  -                       mongodbReactive                  -                       mongodb                  -                       neo4j                  -                       r2dbc                  -                       redis_reactive                  -                       redis                  -                       rest                  -                       solr          Spring.cloud              bus                  -                       cloudfoundry_discovery                  -                       config_server                  -                       function_web                  -                       gcp_starter_pubsub                  -                       gcp_starter_storage                  -                       gcp_starter                  -                       circuitbreakerReactorResilience4J                  -                       config                  -                       consulConfig                  -                       consulDiscovery                  -                       contractStubRunner                  -                       contractVerifier                  -                       gateway                  -                       loadbalancer                  -                       oauth2                  -                       openServiceBroker                  -                       openfeign                  -                       security                  -                       sleuth                  -                       task                  -                       vault_config                  -                       zipkin                  -                       zookeeperConfig                  -                       zookeeperDiscovery                  -                       starter                  -                       streamBinderRabbit          Spring.cloud.aws              jdbc                  -                       messaging                  -                       aws          Spring.cloud.netflix              eurekaClient                  -                       eurekaServer                  -                       hystrixDashboard                  -                       hystrix                  -                       ribbon                  -                       turbineStream                  -                       turbine                  -                       zuul          Spring.cloud.stream              binderKafkaStreams                  -                       binderKafka                  -                       stream          Spring.data              halExplorer          Spring.integration              amqp                  -                       gemfire                  -                       jdbc                  -                       jms                  -                       jpa                  -                       kafka                  -                       mail                  -                       mongodb                  -                       r2dbc                  -                       redis                  -                       rsocket                  -                       security                  -                       stomp                  -                       test                  -                       webflux                  -                       websocket                  -                       ws          Spring.reactor              test                  -                       kotlin          Spring.security              spring_security_messaging                  -                       spring_security_rsocket                  -                       spring_security_test          Spring.session              dataRedis                  -                       jdbc          Spring.springCloud              circuitBreaker                  -                       configClient                  -                       serviceRegistry"},{"location":"dependency-notations/#squarekt","title":"Square.kt","text":"Group Dependency Notations Square              kotlinPoet                  -                       logcat                  -                       moshi                  -                       okHttp3                  -                       okio                  -                       picasso                  -                       retrofit2          Square.kotlinPoet              metadataSpecs                  -                       metadata          Square.leakCanary              androidInstrumentation                  -                       androidProcess                  -                       android                  -                       deobfuscationGradlePlugin                  -                       objectWatcher                  -                       plumber                  -                       shark          Square.leakCanary.objectWatcher              android          Square.leakCanary.shark              android                  -                       cli                  -                       graph                  -                       hprof          Square.moshi              adapters                  -                       kotlinCodegen                  -                       kotlinReflect                  -                       javaReflect          Square.okHttp3              loggingInterceptor                  -                       mockWebServer3                  -                       mockWebServer                  -                       android                  -                       bom                  -                       brotli                  -                       coroutines                  -                       dnsOverHttps                  -                       sse                  -                       tls                  -                       urlConnection                  -                       okHttp          Square.okHttp3.mockWebServer3              junit4                  -                       junit5          Square.picasso              pollexor          Square.retrofit2              mock                  -                       retrofit          Square.retrofit2.adapter              java8                  -                       rxJava2                  -                       rxJava3                  -                       rxJava1          Square.retrofit2.converter              gson                  -                       jackson                  -                       moshi                  -                       scalars                  -                       simpleXml                  -                       wire          Square.wire              gradlePlugin                  -                       runtime          Square.wire.grpc              client"},{"location":"dependency-notations/#testingkt","title":"Testing.kt","text":"Group Dependency Notations Testing              mockK                  -                       junit4                  -                       hamcrest                  -                       robolectric          Testing.assertj              core                  -                       db                  -                       guava                  -                       jodaTime                  -                       swing          Testing.hamcrest              core                  -                       library          Testing.junit              bom                  -                       jupiter          Testing.junit.jupiter              api                  -                       engine                  -                       migrationSupport                  -                       params          Testing.kotest              core                  -                       propertyArrow                  -                       property          Testing.kotest.assertions              arrow                  -                       compiler                  -                       core                  -                       json                  -                       jsoup                  -                       klock                  -                       konform                  -                       kotlinxDateTime                  -                       ktor                  -                       sql          Testing.kotest.extensions              allure                  -                       embeddedKafka                  -                       gherkin                  -                       koin                  -                       mockServer                  -                       pitest                  -                       robolectric                  -                       spring                  -                       testContainers                  -                       wiremock          Testing.kotest.extensions.property              arbs                  -                       datetime          Testing.kotest.framework              api                  -                       datatest          Testing.kotest.plugins              piTest          Testing.kotest.runner              junit4                  -                       junit5          Testing.mockK              android                  -                       common          Testing.mockito              kotlin                  -                       android                  -                       core                  -                       errorProne                  -                       inline                  -                       junitJupiter          Testing.spek.dsl              js                  -                       jvm                  -                       metadata          Testing.spek.dsl.native              linux                  -                       macos                  -                       windows          Testing.spek.runner              junit5          Testing.spek.runtime              jvm                  -                       metadata          Testing.strikt              arrow                  -                       bom                  -                       core                  -                       gradle                  -                       jackson                  -                       javaTime                  -                       mockk                  -                       protobuf                  -                       spring"},{"location":"dependency-notations/#touchlabkt","title":"Touchlab.kt","text":"Group Dependency Notations Touchlab              kermit          Touchlab.kermit              bugsnagTest                  -                       bugsnag                  -                       crashlyticsTest                  -                       crashlytics                  -                       gradlePlugin                  -                       test          Touchlab.stately              common                  -                       concurrency                  -                       isoCollections                  -                       isolate"},{"location":"gradle-buildsrcversions/","title":"Gradle buildSrcVersions","text":"<p>The ancestor of the plugin <code>id(\"de.fayard.refreshVersions\")</code> was a plugin called <code>id(\"de.fayard.buildSrcVersions\")</code>. It took advantage of the IDE integration with the buildSrc module in Gradle.</p> <p>The idea still makes sense for example to have better IDE support for Groovy, and in that case you can enable it and use the task buildSrcVersions buildSrcLibs.</p>"},{"location":"gradle-buildsrcversions/#gradle-buildsrcversions-is-dead","title":"Gradle buildSrcVersions is dead\u2026","text":"<p>What the former plugin did was to auto-generate the <code>buildSrc/.../{Libs,Versions}.kt</code> files above!</p> <pre><code>$ ./gradlew buildSrcVersions\n# now that would be: ./gradlew buildSrcLibs\n&gt; Task :buildSrcVersions\n        new file:   buildSrc/build.gradle.kts\n        new file:   buildSrc/.gitignore\n        new file:   buildSrc/src/main/kotlin/Libs.kt\n        new file:   buildSrc/src/main/kotlin/Versions.kt\n</code></pre> <p>The idea was to take advantage of IntelliJ &amp; Android Studio support for the Gradle buildSrc module.</p>"},{"location":"gradle-buildsrcversions/#the-buildsrc-module-in-gradle","title":"The buildSrc module in Gradle","text":"<p>The <code>buildSrc</code> is a Gradle module where you can write Kotlin code (with full tooling support). That code is then be available to all your build files - not your final application.</p> <p>One cool thing you can do with it is to replace those libraries.gradle files we used to write:</p> buildSrc/src/main/kotlin/Libs.kt <pre><code>object Libs {\n    const val okhttp = \"com.squareup.okhttp3:okhttp:\" + Versions.okhttp\n    const val okio = \"com.squareup.okio:okio:\" + Versions.okio\n}\n</code></pre> buildSrc/src/main/kotlin/Versions.kt <pre><code>object Versions {\n    const val okhttp = \"3.12.1\"\n    const val okio = \"2.0.0\"\n}\n</code></pre> <p>The crucial difference was that IntelliJ IDEA and Android Studio have good support for calling it from <code>build.gradle[.kts]</code></p> <p>Finally the IDE tooling we deserve:</p> <ul> <li>auto-completion</li> <li>jumping to definition</li> <li>\u2026</li> </ul>"},{"location":"gradle-buildsrcversions/#long-life-to-gradle-buildsrclibs","title":"Long life to \u201cgradle buildSrcLibs\u201d!","text":"<p>The <code>Versions.kt</code> file was replaced by a technically better solution, the <code>versions.properties</code> file.</p> <p>That said, the <code>Libs.kt</code> file still has its use cases, for example to have better IDE support for Groovy.</p> <p>Enable it in your <code>settings.gradle(.kts)</code> file:</p> <pre><code>refreshVersions {\n    enableBuildSrcLibs()\n}\n</code></pre> <p>The task <code>buildSrcLibs</code> is now available</p> <p>(It also has an alias: <code>buildSrcVersions</code> for easier transition for existing users).</p> <p>Use it like this:</p> <pre><code>$ ./gradlew buildSrcLibs\n&gt; Task :buildSrcLibs\n        new file:   versions.properties\n        new file:   buildSrc/src/main/kotlin/Libs.kt\n</code></pre> <p>The task generates what you expect:</p> versions.properties <pre><code>version.okhttp=3.12.1\nversion.okio=2.0.0\n</code></pre> buildSrc/src/main/kotlin/Libs.kt <pre><code>object Libs {\n    const val okhttp = \"com.squareup.okhttp3:okhttp:_\"\n    const val okio = \"com.squareup.okio:okio:_\"\n}\n</code></pre> <p>The constants generated in <code>Libs.kt</code> have the same name as they had in the <code>buildSrcVersions</code> plugin.</p> <p>This makes updating to refreshVersions pretty straightforward.</p>"},{"location":"gradle-buildsrcversions/#replace-your-dependencies","title":"Replace your dependencies","text":"<p>First, reload/sync your Gradle project in the IDE.</p> <p>You can now start to replace your magic strings with the properties available in <code>Libs.kt</code></p> <p></p>"},{"location":"gradle-buildsrcversions/#update-dependencies","title":"Update dependencies","text":"<p>You can still automatically look for updates, but this is now done with the task <code>refreshVersions</code> and editing the file <code>versions.properties</code></p> <pre><code>$ ./gradlew refreshVersions\n</code></pre> <p>Read more: Update dependencies.</p>"},{"location":"gradle-tips/","title":"Gradle tips and tricks","text":"<p>More information to make your build great again!</p>"},{"location":"gradle-tips/#switch-to-the-kotlin-dsl","title":"Switch to the Kotlin DSL","text":"<p>Groovy was there first in Gradle, but consider switching to Kotlin if you have not done so already. The cryptic error messages will go away, and the IDE support is far superior. Hello auto-complete!</p> <p>How Kotlin makes editing your Gradle build less frustrating</p>"},{"location":"gradle-tips/#consider-using-the-gradle-build-scan","title":"Consider using the Gradle build scan","text":"<p>Given the range of information it gives you about your build, it\u2019s a no-brainer to use the build scan if you are working an open-source project or have a Gradle Enterprise account. For a company project, understands the trade off of having this information potentially shared by someone outside.</p> <p>It has to be configured in <code>settings.gradle[.kts]</code></p> <pre><code>// https://dev.to/jmfayard/the-one-gradle-trick-that-supersedes-all-the-others-5bpg\nplugins {\n    id(\"com.gradle.enterprise\").version(VERSION)\n}\n\ngradleEnterprise {\n    buildScan {\n        // Accept the license agreement for com.gradle.build-scan plugin\n        termsOfServiceUrl = \"https://gradle.com/terms-of-service\"\n        termsOfServiceAgree = \"yes\"\n        publishOnFailure()\n    }\n}\n</code></pre> <p>Find VERSION at https://plugins.gradle.org/plugin/com.gradle.enterprise</p> <p>Build scan - the one Gradle trick that supersedes all the others</p>"},{"location":"gradle-tips/#configure-gradle-with-gradleproperties","title":"Configure Gradle with gradle.properties","text":"<p>You need to put some magic property with some magic value in gradle.properties, but which one?</p> <p>Configure Gradle with Gradle Properties</p>"},{"location":"gradle-tips/#set-up-github-actions-with-gradle","title":"Set-up GitHub Actions with Gradle","text":"<p>A simple workflow to get you up and running with continuous integration.</p> <ul> <li>copy-paste <code>.github/worrkflows/runOnGitHub.yml</code></li> <li>create a Gradle task called <code>runOnGitHub</code></li> <li>create a pull request, and you are good to go!</li> </ul> <p>How do I set up GitHub Actions for my Gradle or Android project?</p> <p>More complex workflows can be found in the repositories refreshVersions and Splitties</p>"},{"location":"gradle-tips/#gradle-settings","title":"Gradle Settings","text":"<p>A Gradle project has a Settings file called <code>settings.gradle</code>  or <code>settings.gradle.kts</code> where you must respect a certain order (otherwise, the build breaks).</p> <p>The order is:</p> <ol> <li>imports, if any.</li> <li>The <code>pluginManagement</code> block, if any.</li> <li>The <code>buildscript</code> block, if any. (We will use it)</li> <li>The <code>plugins</code> block, if any settings plugins are applied.</li> <li>Logic for Gradle settings (any other code).</li> </ol> <p>See the example snippet below:</p> <pre><code>import com.example.something // Imports at the top, as usual.\n\npluginManagement {} // Optional\n\nbuildscript {\n    // We will setup refreshVersions here, see below.\n}\n\nplugins { // Optional\n    id(\"de.fayard.refreshVersions\") version \"0.10.0\"\n    // other plugins like the Gradle Entreprise plugin go here\n}\n\nrefreshVersions { // Optional configuration\n\n}\n\n// Then you can have other code after the blocks above,\n\nrootProject.name = \"My Project\" // Optional, defaults to parent dir's name.\ninclude(\":app\") // If the project has modules/subprojects to declare.\n</code></pre>"},{"location":"migrate/","title":"Migrate","text":"<p>Migrating an existing project to refreshVersions manually is tricky:</p> <ul> <li>Existing dependencies are ignored because they don\u2019t use the version placeholder <code>_</code>.</li> <li>Replacing the hardcoded version with the version placeholder is not what you want, because it has the major side effect to upgrade all your dependencies to whatever is the latest version available.</li> </ul> <p>That\u2019s why we made a Gradle task specifically for migration.</p> <p>First, ensure you are using the plugin\u2019s latest version:</p> settings.gradle.ktssettings.gradle <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id(\"de.fayard.refreshVersions\") version \"0.60.6\"\n}\n</code></pre> <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id 'de.fayard.refreshVersions' version '0.60.6'\n}\n</code></pre>"},{"location":"migrate/#migrate-semi-automatically","title":"Migrate semi-automatically","text":"<p>The task refreshVersionsMigrate takes care of the migration semi-automatically:</p> <pre><code>./gradlew refreshVersionsMigrate\n</code></pre> <p>Running the task just like that without any parameters will lead to a failure. The error message will tell that the option <code>--mode</code> is required, and it will list all the possible values.</p> <p>You should see something like this:</p> <pre><code>&gt; Task :refreshVersionsMigrate\n        modified:   versions.properties\n        modified:   build.gradle.kts\n        modified:   gradle/libraries.gradle\n\nTo find available updates, run this:\n\n    ./gradlew refreshVersions\n</code></pre> <p>At that point, you probably want to have a look at the <code>git diff</code> to see what changed and fix/tweak things if needed.</p> <p>As you can see, depending on the mode you selected, it edits some files in a given way.</p> <p>For the <code>VersionsPropertiesOnly</code> mode:</p> <ul> <li>It generates <code>versions.properties</code> with the current version of all dependencies.</li> <li>It modifies <code>build.gradle(.kts)</code> files and other files like <code>libraries.gradle</code> or <code>buildSrc/src/main/kotlin/Libs.kt</code> known to contain dependency notations, so that the version placeholder <code>_</code> is used everywhere.</li> </ul> <p>For the <code>VersionCatalogOnly</code> mode:</p> <ul> <li>It generates <code>gradle/libs.versions.toml</code> with the current version of all dependencies.</li> <li>It modifies <code>build.gradle(.kts)</code> files, so that dependency notations everywhere.</li> </ul> <p>For the other modes, you\u2019ll see a combination of the above.</p> <p>If anything isn\u2019t working well for you, please, give us here your feedback for refreshVersionsMigrate \ud83d\udc4d\ud83c\udffc.</p>"},{"location":"refreshversions-bot/","title":"RefreshVersionsBot","text":"<p>Bots like dependabot and renovabot take another approach to help you upgrade your dependencies: they can\u2019t be used locally on your machine, but they do send you pull requests proposing you to update your dependencies.</p> <p>If you like this approach, a simple GitHub Actions workflow allows you to do the same with refreshVersions.</p> <p></p> <p>Once a week, it will run refreshVersions, commit the changes to <code>versions.properties</code> and other files, create a commit and a pull request. Now you can\u2019t forget to run refreshVersions :)</p> <p>This is all done by the workflow below.</p>"},{"location":"refreshversions-bot/#yaml-workflow","title":"YAML workflow","text":"<p>Create a file <code>.github/workflows/refreshVersions.yml</code> with this content</p> <pre><code># Worfklow for https://jmfayard.github.io/refreshVersions/\n\nname: RefreshVersions\n\non:\n  workflow_dispatch:\n  schedule:\n   - cron: '0 7 * * 1'\n\njobs:\n  \"Refresh-Versions\":\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - id: step-0\n        name: check-out\n        uses: actions/checkout@v3\n        with:\n          ref: main\n      - id: step-1\n        name: setup-java\n        uses: actions/setup-java@v3\n        with:\n          java-version: 17\n          distribution: adopt\n      - id: step-2\n        name: create-branch\n        uses: peterjgrainger/action-create-branch@v2.2.0\n        with:\n          branch: dependency-update\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - id: step-3\n        name: gradle refreshVersions\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: refreshVersions\n      - id: step-4\n        name: Commit\n        uses: EndBug/add-and-commit@v9\n        with:\n          author_name: GitHub Actions\n          author_email: noreply@github.com\n          message: Refresh versions.properties\n          new_branch: dependency-update\n          push: --force --set-upstream origin dependency-update\n      - id: step-5\n        name: Pull Request\n        uses: repo-sync/pull-request@v2\n        with:\n          source_branch: dependency-update\n          destination_branch: main\n          pr_title: Upgrade gradle dependencies\n          pr_body: '[refreshVersions](https://github.com/jmfayard/refreshVersions) has found those library updates!'\n          pr_draft: true\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> <p>Commit and Push.</p> <p>To test that the workflow works, you can use the <code>workflow_dispatch</code> feature.</p> <p></p>"},{"location":"refreshversions-bot/#kotlin-worfklow","title":"Kotlin Worfklow","text":"<p>Want to customize the workflow?</p> <p>YAML Programming sucks so you should consider modifying instead the Kotlin script powered by github-actions.kts with which the YAML above was generated.</p> <ul> <li>Create a file <code>.github/workflows/refreshVersions.main.kts</code></li> <li>Make it executable with <code>chmod +x .github/workflows/refreshVersions.main.kts</code></li> <li>Put it the content above</li> <li>Run with <code>.github/workflows/refreshVersions.main.kts</code></li> </ul> <pre><code>#!/usr/bin/env kotlin\n// Usage: $ .github/workflows/refreshVersions.main.kts\n\n@file:DependsOn(\"it.krzeminski:github-actions-kotlin-dsl:0.23.0\")\n// Find latest version at https://github.com/krzema12/github-actions-kotlin-dsl/releases\n\nimport it.krzeminski.githubactions.actions.actions.CheckoutV3\nimport it.krzeminski.githubactions.actions.actions.SetupJavaV3\nimport it.krzeminski.githubactions.actions.endbug.AddAndCommitV9\nimport it.krzeminski.githubactions.actions.gradle.GradleBuildActionV2\nimport it.krzeminski.githubactions.actions.peterjgrainger.ActionCreateBranchV2\nimport it.krzeminski.githubactions.actions.reposync.PullRequestV2\nimport it.krzeminski.githubactions.domain.RunnerType\nimport it.krzeminski.githubactions.domain.Workflow\nimport it.krzeminski.githubactions.domain.triggers.Cron\nimport it.krzeminski.githubactions.domain.triggers.Schedule\nimport it.krzeminski.githubactions.domain.triggers.WorkflowDispatch\nimport it.krzeminski.githubactions.dsl.expressions.expr\nimport it.krzeminski.githubactions.dsl.workflow\nimport it.krzeminski.githubactions.yaml.writeToFile\nimport java.nio.file.Paths\n\nprivate val everyMondayAt7am = Cron(minute = \"0\", hour = \"7\", dayWeek = \"1\")\n\nval branch = \"dependency-update\"\nval commitMessage = \"Refresh versions.properties\"\nval prTitle = \"Upgrade gradle dependencies\"\nval prBody = \"[refreshVersions](https://github.com/jmfayard/refreshVersions) has found those library updates!\"\nval javaSetup = SetupJavaV3(\n    javaVersion = \"17\",\n    distribution = SetupJavaV3.Distribution.Adopt,\n)\n\nval workflowRefreshVersions: Workflow = workflow(\n    name = \"RefreshVersions\",\n    on = listOf(\n        Schedule(listOf(everyMondayAt7am)),\n        WorkflowDispatch(),\n    ),\n    sourceFile = Paths.get(\".github/workflows/refreshversions.main.kts\"),\n) {\n    job(\n        id = \"Refresh-Versions\",\n        runsOn = RunnerType.UbuntuLatest,\n    ) {\n        uses(\n            name = \"check-out\",\n            action = CheckoutV3(ref = \"main\"),\n        )\n        uses(\n            name = \"setup-java\",\n            action = javaSetup,\n        )\n        uses(\n            name = \"create-branch\",\n            action = ActionCreateBranchV2(branch),\n            env = linkedMapOf(\n                \"GITHUB_TOKEN\" to expr { secrets.GITHUB_TOKEN },\n            ),\n        )\n        uses(\n            name = \"gradle refreshVersions\",\n            action = GradleBuildActionV2(arguments = \"refreshVersions\"),\n        )\n        uses(\n            name = \"Commit\",\n            action = AddAndCommitV9(\n                authorName = \"GitHub Actions\",\n                authorEmail = \"noreply@github.com\",\n                message = commitMessage,\n                newBranch = branch,\n                push = \"--force --set-upstream origin dependency-update\",\n            ),\n        )\n        uses(\n            name = \"Pull Request\",\n            action = PullRequestV2(\n                sourceBranch = branch,\n                destinationBranch = \"main\",\n                prTitle = prTitle,\n                prBody = prBody,\n                prDraft = true,\n                githubToken = expr { secrets.GITHUB_TOKEN },\n            ),\n        )\n    }\n\n}\nprintln(\"Updating ${workflowRefreshVersions.targetFileName}\")\nworkflowRefreshVersions.writeToFile()\n</code></pre>"},{"location":"setup/","title":"Setup","text":"<p>This guide will help you set up refreshVersions in a Gradle project.</p>"},{"location":"setup/#update-gradle-if-needed","title":"Update Gradle (if needed)","text":"<p>Gradle 8+ is required because this plugin relies on Kotlin 1.8. That said, the version 0.60.3 of refreshVersions supports Gradle 6.8 to 7.x, in case you need to upgrade Gradle later.</p> <p>Updating Gradle is anyway usually a good idea. You get fewer bugs, more features, and faster builds.</p> <p>See available Gradle updates</p> <p>Gradle maintains a page that references all the releases at gradle.org/releases.</p> <p>It can be helpful if you find out you need/want to upgrade your project to a specific version.</p> <p>Run this command to update:</p> <pre><code>./gradlew wrapper --gradle-version 8.5\n</code></pre> <p>If the command fails</p> <p>If that command fails, locate the <code>gradle/wrapper/gradle-wrapper.properties</code> file, and edit the distribution url to the Gradle version you want to update to.</p> <p>Don\u2019t rely on the IDE for troubleshooting</p> <p>If you are in the process of troubleshooting a failing build, we recommend that you do it in the terminal rather than trying to perform a Gradle sync/import/reload in the IDE, because it will unfortunately not show the root causes of the failures.</p> <p>You should also try to update the Gradle plugins present in your build to the latest version. For example on an Android project, do update the version of the Gradle Android Plugin.</p> <p>The Gradle documentation has detailed migration guides if you are stuck:</p> <ul> <li>From Gradle 8+: https://docs.gradle.org/current/userguide/upgrading_version_8.html</li> <li>From Gradle 7+: https://docs.gradle.org/current/userguide/upgrading_version_7.html</li> <li>From Gradle 6+: https://docs.gradle.org/current/userguide/upgrading_version_6.html</li> <li>From Gradle 5.x: https://docs.gradle.org/current/userguide/upgrading_version_5.html</li> <li>From Gradle 4.x: https://docs.gradle.org/current/userguide/upgrading_version_4.html</li> </ul>"},{"location":"setup/#add-the-plugin","title":"Add the plugin","text":"<p>Here is how to configure gradle refreshVersions:</p> settings.gradle.ktssettings.gradle <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id(\"de.fayard.refreshVersions\") version \"0.60.6\"\n}\n</code></pre> <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id 'de.fayard.refreshVersions' version '0.60.6'\n}\n</code></pre>"},{"location":"setup/#if-you-have-a-buildsrc-module","title":"If you have a buildSrc module","text":"<p>If you use the buildSrc module and have dependencies declared in the <code>buildSrc/build.gradle[.kts]</code> file, you probably want to use refreshVersions there as well. The setup is the same:</p> buildSrc/settings.gradle.ktsbuildSrc/settings.gradle <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n    }\n    plugins {\n        id(\"de.fayard.refreshVersions\") version \"0.60.6\"\n    }\n}\n\nplugins {\n    id(\"de.fayard.refreshVersions\")\n}\n</code></pre> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n    }\n    plugins {\n        id 'de.fayard.refreshVersions' version '0.60.6'\n    }\n}\n\nplugins {\n    id 'de.fayard.refreshVersions'\n}\n</code></pre>"},{"location":"setup/#if-you-use-groovy-dsl-ie-buildgradle-files-not-kts","title":"If you use Groovy DSL, i.e. build.gradle files (not kts)","text":"<p>Auto-completion for dependency notations won\u2019t work out of the box.</p> <p>A workaround is to configure the plugin in the <code>buildSrc</code> module (create the directory if it doesn\u2019t exist yet):</p> buildSrc/settings.gradle <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n    }\n    plugins {\n        id 'de.fayard.refreshVersions' version '0.60.6'\n    }\n}\n\nplugins {\n    id 'de.fayard.refreshVersions'\n}\n</code></pre>"},{"location":"setup/#if-you-have-a-compositeincluded-build","title":"If you have a composite/included build","text":"<p>Sharing used versions with included builds is not supported at the moment.</p> <p>If you need/want this feature, please vote with a \ud83d\udc4d on this issue, subscribe to it, and tell us about your use case, to help us prioritize.</p>"},{"location":"setup/#if-you-want-to-use-a-snapshot-version","title":"If you want to use a snapshot version","text":"settings.gradle.ktssettings.gradle <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\nplugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id(\"de.fayard.refreshVersions\") version \"0.60.7-SNAPSHOT\"\n}\n</code></pre> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }\n    }\n}\nplugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id 'de.fayard.refreshVersions' version '0.60.7-SNAPSHOT'\n}\n</code></pre>"},{"location":"setup/#configure-the-plugin","title":"Configure the plugin","text":"<p>There is no required configuration!</p> <p>There are some options which can be configured in the <code>refreshVersions { }</code> block.</p> <p>If you are curious about what are the available options, you can use auto-complete (you can also type <code>this.</code> before to filter the results).</p> <p></p>"},{"location":"setup/#earlier-versions","title":"Earlier versions","text":""},{"location":"setup/#if-you-are-upgrading-from-the-buildsrcversions-plugin","title":"If you are upgrading from the buildSrcVersions plugin","text":"<p>Before refreshVersions, there was the plugin buildSrcVersions.</p> <p>If your project is using it, remove all its configuration from the top <code>build.gradle[.kts]</code> file to avoid any clashes between the two plugins:</p> build.gradle.kts <pre><code>-plugins {\n-    id(\"de.fayard.buildSrcVersions\") version \"0.3.2\"\n-}\n\n-buildSrcVersions {\n-    someOption = \"somevalue\"\n-}\n</code></pre> <p>Then, enable <code>buildSrcLibs</code> as such:</p> settings.gradle.ktssettings.gradle <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id(\"de.fayard.refreshVersions\") version \"0.60.6\"\n}\n\nrefreshVersions {\n    enableBuildSrcLibs() // &lt;-- Add this\n}\n</code></pre> <pre><code>plugins {\n    // See https://jmfayard.github.io/refreshVersions\n    id 'de.fayard.refreshVersions' version '0.60.6'\n}\n\nrefreshVersions {\n    enableBuildSrcLibs() // &lt;-- Add this\n}\n</code></pre> <p>Read more: gradle buildSrcVersions.</p>"},{"location":"setup/#next-steps","title":"Next steps","text":"<p>You did it! refreshVersions is now properly setup.</p> <p>Now, you might want to:</p> <ul> <li>Migrate your project.</li> <li>Add new dependencies.</li> <li>Update dependencies.</li> </ul>"},{"location":"update-dependencies/","title":"Update dependencies","text":"<p>The core feature is gradle refreshVersions is that it will lookup automatically for available updates for all the dependencies that it manages.</p> <p>This is done in three small steps:</p>"},{"location":"update-dependencies/#1-run-the-refreshversions-gradle-task","title":"1. Run the refreshVersions Gradle task","text":"<p>Run the <code>refreshVersions</code> gradle task on the root project:</p> <pre><code>./gradlew refreshVersions\n</code></pre> <p>Hint: You don\u2019t need to leave the IDE to run a Gradle task. IntelliJ has a handy action named \u201cExecute Gradle Task\u201d:</p> <p></p> <p>Gradle refreshVersions is fast: it usually takes less than 10 seconds to execute on relatively big projects.</p>"},{"location":"update-dependencies/#2-apply-the-updates-you-want-to","title":"2. Apply the updates you want to","text":"<p>Open the <code>versions.properties</code> file.</p> <p>Let say you have this initial state:</p> <p></p> <p>After you have run the <code>refreshVersions</code> task, you will see the available updates as comments:</p> <p></p>"},{"location":"update-dependencies/#why-as-comments","title":"Why as comments?","text":"<p>Looking for available updates is certainly a job best done by a computer program (instead of you doing the monkey job of googling, clicking and scrolling for every single used dependency).</p> <p>However, the decision of whether to upgrade or not, when, and towards which version, is best decided by the developers responsible like you.</p>"},{"location":"update-dependencies/#edit-the-versionsproperties-file","title":"Edit the <code>versions.properties</code> file","text":"<p>If you decide to update, just replace the previous version with the update:</p> <p></p> <p>If you decide to not update for now, you can leave the comments there.</p> <p>They will not affect your build, and will serve as a reminder to revisit upgrading these dependencies later. They also allow you to glance at how behind the dependencies are, which is a way to estimate the technical debt of the project regarding the dependencies upgrades.</p> <p>If you want to delete these comments, it\u2019s possible too, and it\u2019s safe. Running the <code>refreshVersions</code> task will bring them back (plus any newer available update).</p>"},{"location":"update-dependencies/#3-perform-a-gradle-syncreload","title":"3. Perform a Gradle sync/reload","text":"<p>The file <code>versions.properties</code> is part of the Gradle build.</p> <p>Consequently, after you have edited it, you need to ensure the IDE gets the changes.</p> <p>The action to do it have a different name depending on the IDE:</p> <p>IntelliJ IDEA: Run the \u201cReload all Gradle projects\u201d action (via ctrl/cmd + shift + A), or click the refresh arrows in the Gradle tool window</p> <p>Android Studio: Run the \u201cSync Project with Gradle Files\u201d action (via ctrl/cmd + shift + A), or click the elephant + arrow icon in the toolbar.</p> <p>At that point, you probably want to:</p> <ul> <li>\u23ed Migrate deprecated symbols (if any)</li> <li>\ud83d\udd28 Ensure the codebase still builds properly</li> <li>\u2705 Ensure the tests still run properly</li> <li>\ud83d\udd75\ufe0f\u200d\u2640\ufe0f Do manual testing if needed</li> <li>\u2705 Commit when appropriate</li> <li>\ud83d\udc9d Become our sponsor to thank us for the time saved \ud83d\ude09</li> </ul>"},{"location":"update-dependencies/#filter-which-versions-are-added-to-versionsproperties","title":"Filter which versions are added to versions.properties","text":"<p>Maybe you don\u2019t want alpha/beta versions to show up in <code>versions.properties</code>.</p> <p>This is easy to configure with a <code>rejectVersionIf { ... }</code> predicate:</p> settings.gradle.ktssettings.gradle <pre><code>refreshVersions {\n    rejectVersionIf {\n        candidate.stabilityLevel != StabilityLevel.Stable\n    }\n}\n</code></pre> <pre><code>refreshVersions {\n    rejectVersionIf {\n        candidate.stabilityLevel != StabilityLevel.Stable\n    }\n}\n</code></pre> <p>A perhaps better approach is to display development versions only if you are already using a development version at least as stable:</p> settings.gradle.ktssettings.gradle <pre><code>refreshVersions {\n    rejectVersionIf {\n        candidate.stabilityLevel.isLessStableThan(current.stabilityLevel)\n    }\n}\n</code></pre> <pre><code>refreshVersions {\n    rejectVersionIf {\n        candidate.stabilityLevel.isLessStableThan(current.stabilityLevel)\n    }\n}\n</code></pre> <p><code>rejectVersionIf { ...}</code> is pretty flexible, you can also use it to ban versions from specific version keys:</p> settings.gradle.ktssettings.gradle <pre><code>refreshVersions {\n    rejectVersionIf {\n        val blacklist = listOf(\"version.retrofit\", \"version.okhttp3\")\n        versionKey in blacklist\n    }\n}\n</code></pre> <pre><code>refreshVersions {\n    rejectVersionIf {\n        def blacklist =  [\"version.retrofit\", \"version.okhttp3\"]\n        versionKey in blacklist\n    }\n}\n</code></pre> <p>Or if you prefer for dependencies with specific maven coordinates:</p> settings.gradle.ktssettings.gradle <pre><code>refreshVersions {\n    rejectVersionIf {\n        val blacklist = listOf(\"com.squareup.retrofit\", \"com.squareup.okhttp3\")\n        moduleId.group in blacklist\n    }\n}\n</code></pre> <pre><code>refreshVersions {\n    rejectVersionIf {\n        def blacklist = [\"com.squareup.retrofit\", \"com.squareup.okhttp3\"]\n        moduleId.group in blacklist\n    }\n}\n</code></pre> <p>You can also combine all of the above to match your particular needs!</p>"},{"location":"contributing/before-you-contribute/","title":"Before you contribute","text":"<p>Please, in order to not waste your efforts, your time, and our time, before working on any contribution, take a little time to read the relevant parts of the contributing guide.</p>"},{"location":"contributing/before-you-contribute/#code-of-conduct","title":"Code of Conduct","text":"<p>First, we have a very simple code of conduct that you need to follow while interacting on this repo:</p> <p>Whenever you are about to post or commit, ask yourself \u201cWould an idiot do that?\u201d, and if they would, do not do that thing.</p> <p>https://youtu.be/KFwUcEwD4l4</p> <p></p> <p>Use this Code of Conduct as you like in your own projects and organizations.</p>"},{"location":"contributing/before-you-contribute/#q-a","title":"Q &amp; A","text":"<p>Q: What about breathing?</p> <p>A: The behavior must be exclusive to idiocy.</p>"},{"location":"contributing/before-you-contribute/#general-considerations","title":"General considerations","text":"<p>Note: If you only want to improve the docs, you can skip the rest of this page and jump right on the documentation specific contributing guide.</p>"},{"location":"contributing/before-you-contribute/#reliability","title":"Reliability","text":"<p>refreshVersions is used by a lot of different projects, and it shall be as reliable as possible, especially since it takes part in the build process of these projects and could break it in case of a bug.</p> <p>As a consequence, we strive to keep its quality as high as we can, and we actively avoid regressions and unreliable code.</p> <p>Sometimes, that might mean not adding a feature because of its impact, or the risks for end projects.</p> <p>Please, when submitting a feature request or a contribution, take some time to think about the implications on projects other than yours.</p>"},{"location":"contributing/before-you-contribute/#compatibility","title":"Compatibility","text":"<p>Also, refreshVersions being a long term project, we do our best to not break the builds of our users on upgrade, so for any new feature or change, we shall have way to introduce it in a compatible way.</p> <p>Note that as a Gradle plugin, we have the ability to automate migration tasks if needed, but it cannot always apply.</p>"},{"location":"contributing/before-you-contribute/#submitting-issues","title":"Submitting issues","text":"<p>If you want to report an issue or submit a feature request, see this guide to help us address it as quickly as possible.</p>"},{"location":"contributing/before-you-contribute/#submitting-prs","title":"Submitting PRs","text":"<p>Unless it\u2019s the special case of minor documentation improvement, please, do not start working on a PR before you\u2019re assigned via the corresponding issue. Not doing so might lead to overlapping efforts, and it\u2019s less likely we would accept it.</p> <p>If you have been assigned an issue, if you are a maintainer of this project or if you just want to play with the project on your own, first, see how to set up the dev environment properly, as the IDE will not get it right on its own.</p> <p>Once you\u2019ve ensured this is set up correctly, you\u2019ll need to follow our development process. It has the information you need to make a successful contribution, regardless of the type of change.</p>"},{"location":"contributing/improving-docs/","title":"Improving docs","text":""},{"location":"contributing/improving-docs/#docs-are-powered-by-mkdocs","title":"Docs are powered by MKDocs","text":"<p>The documentation of refreshVersions is published on a website accessible via this url: https://splitties.github.io/refreshVersions.</p> <p>It is generated with MKDocs from Markdown files. The variant of Markdown used in MKDocs has useful additional features that we use: - \u201cVariables\u201d interpolation, useful for long urls repeated in the doc. - Automatic generation of table of contents based on headings.</p>"},{"location":"contributing/improving-docs/#where-is-the-doc-source","title":"Where is the doc source","text":"<p>A bunch of things are defined in the <code>mkdocs.yml</code> file (located at the root of the repo):</p> <ul> <li>The structure of the documentation website is under the <code>nav</code> key.</li> <li>Under the <code>extra</code> key, we have common text snippets (example usage: <code>{{link.github}}</code>)</li> <li>Website metadata is defined at the top of the file (you probably don\u2019t need to touch it)</li> <li>Theme and MKDocs configuration</li> </ul> <p>The content of the documentation itself is in the <code>docs</code> directory where you can find Markdown files and images in the <code>img</code> directory.</p>"},{"location":"contributing/improving-docs/#edit-the-doc","title":"Edit the doc","text":"<p>Before starting any work, create a branch in your fork that is based on the <code>release</code> branch.</p> <p>Please, avoid non-improvements such as adding typos, or spelling errors.</p> <p>Also, try to keep the language simple, non-ambiguous, and explicit enough, so all of our users can understand it. \ud83d\ude4f</p>"},{"location":"contributing/improving-docs/#view-your-changes","title":"View your changes","text":"<p>Run one of the following commands, to ensure you have the tools to build the website locally:</p> <ul> <li><code>pip3 install -r docs/requirements.txt</code></li> <li><code>pip install -r docs/requirements.txt</code></li> </ul> <p>Note: on Linux and macOS, <code>pip3</code> is most likely already installed. On Windows, you might want to install anaconda/Python to get it.</p> <p>Start the local server using the <code>mkdocs serve</code> command.</p> <p>You\u2019ll quickly see a link appear in the console to view it in your default browser.</p> <p>Any saved changes will refresh the page automatically if the right one is open in the browser.</p> <p>Once you\u2019re done, you can close the tab, and quit the local server (ctrl + C).</p>"},{"location":"contributing/improving-docs/#submit-your-changes","title":"Submit your changes","text":"<p>Once you\u2019re done, please commit your changes with a clear title and message that mentions what changed in simple terms, then submit the pull request on GitHub.</p>"},{"location":"contributing/submitting-issues/","title":"Submitting issues","text":""},{"location":"contributing/submitting-issues/#check-for-existing-issues-first","title":"Check for existing issues first","text":"<p>Be it a bug report or a feature request, someone else might have already submitted it, so, please, start by searching for existing issues.</p> <p>If you find an existing one, please vote for it with the thumbs up emoji (\ud83d\udc4d). Also, if you find that some info is missing for us, and you can provide it, do it as it might help to resolve it faster.</p> <p>You can also influence the priorities if the impact on your project is high by telling us in the comments, but please avoid useless comments like \u201c+1\u201d, and make sure you stay constructive.</p>"},{"location":"contributing/submitting-issues/#bug-reports","title":"Bug reports","text":"<p>Please, before writing a report, make sure the bug has not been fixed in the latest version of refreshVersions.</p> <p>In your report, provide the needed details to reproduce the issue, and not more than that.</p> <p>However, if the doesn\u2019t reproduce consistently, please report it anyway, and give as many details as you can for us to investigate.</p> <p>If you know any workarounds, please mention them.</p> <p>Finally, make sure you stay constructive in your report.</p>"},{"location":"contributing/submitting-issues/#feature-requests","title":"Feature requests","text":"<p>When submitting a feature request, please explain why you need the feature, what is your use case, and any context that might help understand it.</p> <p>These are more important that your solution suggestion, even if ideas are always welcome.</p> <p>If there\u2019s an alternative to what you want, please show what it is.</p>"},{"location":"contributing/submitting-prs/dependency-notations-updates/","title":"Submitting dependency notations","text":"<p>We want to provide dependency notations for more popular libraries.</p> <p>Want to contribute some?</p> <p>Here is what a dependency notation should look like:</p> <pre><code>@file:Suppress(\"PackageDirectoryMismatch\", \"SpellCheckingInspection\", \"unused\") // 1\n\nimport de.fayard.refreshVersions.core.DependencyGroup\nimport org.gradle.kotlin.dsl.IsNotADependency\n\n/**                                                             // 2\n * painless Kotlin dependency injection\n *\n * - [Official website here](https://kodein.org/di/)\n * - GitHub page: [Kodein-Framework/Kodein-DI](https://github.com/Kodein-Framework/Kodein-DI)\n * - [GitHub Releases here](https://github.com/Kodein-Framework/Kodein-DI/releases)\n */\nobject Kodein : IsNotADependency {                              // 3\n\n    val di = DI                                                 // 4\n\n    object DI : DependencyGroup(                                // 5\n        group = \"org.kodein.di\",                                // 6\n        usePlatformConstraints = false,                         // 7\n        rawRule = \"\"\"\n            org.kodein.di:kodein-di(-*)\n                ^^^^^^^^^\n        \"\"\".trimIndent()                                        // 8\n    ) {\n        val bom = module(\"kodein-bom\", isBom = true)            // 9\n        val js = module(\"kodein-di-js\")                         // 10\n        val androidx = module(\"kodein-di-framework-android-x\")\n    }\n}\n</code></pre> <p>What you need to know:</p> <ol> <li>We use no package on purpose - and suppress the corresponding warning - so that users don\u2019t have to import the dependency notation.</li> <li>We provide a KDoc with a description of what the library does, a link to GitHub, and a link to the documentation. Please, keep the exact same style for consistency.</li> <li>We tag the objects with <code>IsNotADependency</code>, so that the IDE shows an error if the user tries to do <code>implementation(Kodein)</code>.</li> <li>We support Gradle build scripts in both Kotlin and Groovy. <code>Kodein.DI</code> works in Kotlin, but not in Groovy. That\u2019s why we have the property <code>Kotlin.di</code>, which works in both.</li> <li>We use the base class <code>DependencyGroup</code> to define a group of dependency notations. Note that this class also has the <code>IsNotADependency</code> marker interface. If you want the object or sub-group to be a dependency notation itself, use the <code>DependencyNotationAndGroup</code> class instead.</li> <li>The maven group that will be used for all the modules of this <code>DependencyGroup</code> (or <code>DependencyNotationAndGroup</code>).</li> <li>If the library provides a Bill of Materials (BoM for short), or another kind of platform constraints that should always be used, we set <code>usePlatformConstraints = true</code>. (As you can see, in the case of the example, it\u2019s not made mandatory.)</li> <li>All dependency notations with a name like <code>org.kodein.di:kodein-di(-*)</code> will use the same version <code>version.kodein.di</code> because we defined an artifact rule. To learn more about those rules, have a look here.</li> <li><code>DependencyGroup</code> and <code>DependencyNotationAndGroup</code> have first class support for BoMs via the <code>isBom = true</code> parameter. It sets the boolean <code>usePlatformConstraints</code> to <code>true</code> for the group and does various checks.</li> <li>A module is defined via the <code>= module(\"module.name\")</code> syntax.</li> </ol> <p>Three more things before you start coding:</p> <ul> <li>Look at <code>Square</code>, <code>COIL</code>, <code>Http4K</code>, <code>Spring</code>, <code>Kodein</code>, and others for inspiration.</li> <li>Try to not forget any artifact!. One of the best ways to do that is to open an issue in the project of the library for which you contribute dependency notations.</li> <li>Run the unit tests! There are multiple checks that are done to prevent the most common mistakes.</li> </ul>"},{"location":"contributing/submitting-prs/dev-env/","title":"Dev environment for contributors","text":""},{"location":"contributing/submitting-prs/dev-env/#setting-up-the-project-in-your-ide","title":"Setting up the project in your IDE","text":""},{"location":"contributing/submitting-prs/dev-env/#get-the-right-ide","title":"Get the right IDE","text":"<p>We recommend using the most recent version of IntelliJ IDEA to contribute to this project (consider 2020.3 or newer).</p>"},{"location":"contributing/submitting-prs/dev-env/#prepare-your-fork","title":"Prepare your fork","text":"<ol> <li>Fork this project from GitHub if not already done.</li> <li>Clone your fork locally.</li> <li>Checkout the <code>main</code> branch.</li> <li>If your fork is not fresh, ensure its <code>main</code> branch is up to date with upstream:<ol> <li>Run the <code>git fetch upstream</code> command.</li> <li>Run the <code>git merge upstream/main</code> command.</li> </ol> </li> <li>Create a new branch based on <code>main</code> with a name describing what it is about.</li> </ol>"},{"location":"contributing/submitting-prs/dev-env/#import-the-plugins-gradle-project","title":"Import the \u201cplugins\u201d Gradle project","text":"<ol> <li>Locate the <code>plugins/settings.gradle.kts</code> file in the \u201cProject\u201d tool window.</li> <li>Right-click on it to open the contextual menu.</li> <li>Select \u201cLink Gradle Project\u201d.</li> </ol>"},{"location":"contributing/submitting-prs/dev-env/#publish-the-current-version-locally","title":"Publish the current version locally","text":"<p>This step is required for the samples to work afterwards and enable you to test your changes.</p> <ol> <li>Ensure the version in the <code>plugins/version.txt</code> file ends with <code>-SNAPSHOT</code> to avoid overlapping a published version.</li> <li>In the \u201cGradle\u201d tool window, or from the terminal, run the <code>publishToMavenLocal</code> task.</li> </ol>"},{"location":"contributing/submitting-prs/dev-env/#testing-changes-locally","title":"Testing changes locally","text":""},{"location":"contributing/submitting-prs/dev-env/#import-the-samples-to-test-the-changes","title":"Import the samples to test the changes","text":"<p>We have multiple samples to test integration in different scenarios.</p> <p>Here are their names, you can find them in so-named directories in the repo:</p> <ol> <li>sample-kotlin</li> <li>sample-groovy</li> <li>sample-android</li> <li>sample-multi-modules</li> </ol> <p>The first two samples (sample-kotlin and sample-groovy) are the ones you should always test your changes on. They are lightweight, so it\u2019s quick to set up and iterate with.</p> <p>For edge cases in multi-modules projects and for Android specific things, the two other samples are the ones to test your changes on.</p> <p>To import a sample, just like you did for the <code>plugins</code> Gradle project, right-click on the <code>settings.gradle</code> or <code>settings.gradle.kts</code> file and select the \u201cLink Gradle Project\u201d option.</p>"},{"location":"contributing/submitting-prs/dev-env/#testing-in-your-own-project","title":"Testing in your own project","text":"<p>To test your changes in your own project locally, in the <code>settings.gradle</code> or <code>settings.gradle.kts</code> file, you need to add the <code>mavenLocal()</code> repository in the <code>pluginManagement</code> section (create the block at the top of the file if you don\u2019t already have one):</p> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal() // Needed to keep using the Gradle plugin portal for other plugins.\n        mavenLocal() // Also use mavenLocal for local-only versions.\n    }\n}\n</code></pre> <p>Once you\u2019re done, you can replace the version with the snapshot version (e.g. <code>0.9.8</code> -&gt; <code>0.9.9-SNAPSHOT</code>) and test your changes.</p>"},{"location":"contributing/submitting-prs/dev-process/","title":"Development process","text":"<p>Note: If the contribution you want to make is updating, adding or removing dependency notations, you can skip the rest of this document and go directly to the specific guide.</p>"},{"location":"contributing/submitting-prs/dev-process/#better-safe-than-sorry","title":"Better safe than sorry","text":""},{"location":"contributing/submitting-prs/dev-process/#fixing-bugs","title":"Fixing bugs","text":"<p>Please, make sure your bug fix doesn\u2019t introduce new bugs before submitting.</p> <p></p>"},{"location":"contributing/submitting-prs/dev-process/#changing-behavior-of-existing-features","title":"Changing behavior of existing features","text":"<p>Behavior changes might introduce bugs, and these might not be caught until users face them.</p> <p>Consequently, whenever possible, we keep the old implementation and add the new one side by side, with a feature flag controlling which one is being used.</p> <p>That allows our users to switch-off changes that might interfere with their project setup.</p> <p>For changes that break the API or setup of some or all projects, we provide automatic or semi-automatic migration on upgrade. If it\u2019s needed, we will let you know in the corresponding issue.</p>"},{"location":"contributing/submitting-prs/dev-process/#new-features","title":"New features","text":"<p>Unless impossible, we add every new feature behind a feature-flag, so our users can disable it if it causes any problem in their project.</p>"},{"location":"contributing/submitting-prs/dev-process/#send-a-draft-early","title":"Send a draft early","text":"<p>We do not want you to spend a lot of time on a change only to realize it didn\u2019t do in the right direction for us to be able to integrate it in the project.</p> <p>Consequently, we are asking you, especially for new features, to send us an early draft PR that we can give early feedback on before you complete your contribution.</p>"},{"location":"contributing/submitting-prs/dev-process/#check-nothing-is-broken","title":"Check nothing is broken","text":"<p>Before committing anything, please check nothing is broken. \ud83d\ude4f</p> <p>Ways to do it are running the <code>check</code> task against the <code>plugins</code> project, as well as ensuring the sample projects still build, and behave properly in the IDE with your changes.</p>"},{"location":"contributing/submitting-prs/dev-process/#use-proper-commit-messages","title":"Use proper commit messages","text":"<p>If you don\u2019t, we will squash your PR into one commit on merge.</p>"},{"location":"contributing/submitting-prs/dev-process/#you-can-reach-for-help","title":"You can reach for help","text":"<p>Feel free to ask for any help in the PR comments or in the corresponding issue.</p>"},{"location":"contributing/submitting-prs/dev-process/#submitting-the-pr","title":"Submitting the PR","text":"<p>In the text of the PR, make sure to reference the corresponding issue properly.</p>"},{"location":"contributing/submitting-prs/dev-process/#examples","title":"Examples:","text":"<p>For bug fixes:</p> <p>Fixes #456</p> <p>For new features or changes:</p> <p>Resolves #123</p>"}]}